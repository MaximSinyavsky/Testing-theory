Задание 7

1.	Требования - это что?
Требование (requirement50) — описание того, какие функции и с соблюдением каких условий должно выполнять приложение в процессе решения 
полезной для пользователя задачи.
2.	Для чего нужен Анализ требований в разработке программного обеспечения?

3.	Перечислите Виды требований
 — Бизнес-требования (business requirements) выражают цель, ради которой разрабатывается продукт (зачем вообще он нужен, какая от него ожидается польза, как заказчик с его помощью будет получать прибыль);
 — Пользовательские требования (user requirements) описывают задачи, которые пользователь может выполнять с помощью разрабатываемой системы (реакцию системы на действия пользователя, сценарии работы пользователя);
 — Бизнес-правила (business rules) описывают особенности принятых в предметной области (и/или непосредственно у заказчика) процессов, ограничений и иных правил. Эти правила могут относиться к бизнес процессам, правилам работы сотрудников, нюансам работы ПО и т.д;
 — Атрибуты качества (quality attributes) расширяют собой нефункциональные требования и на уровне пользовательских требований могут быть представлены в виде описания ключевых для проекта показателей качества (свойств продукта, не связанных с функциональностью, но являющихся важными для достижения целей создания продукта — производительность, масштабируемость, восстанавливаемость). Атрибутов качества очень много, но для любого проекта реально важными является лишь некоторое их подмножество;
 — Функциональные требования (functional requirements) описывают поведение системы, т.е. её действия (вычисления, преобразования, проверки, обработку и т.д.). В контексте проектирования функциональные требования в основном влияют на дизайн системы;
 — Нефункциональные требования (non-functional requirements) описывают свойства системы (удобство использования, безопасность, надёжность, расширяемость и т.д.), которыми она должна обладать при реализации своего поведения. Здесь приводится более техническое и детальное описание атрибутов качества. В контексте проектирования нефункциональные требования в основном влияют на архитектуру системы;

4.	Перечислите Функциональные уровни требований

5.	Перечислите Нефункциональные уровни требований

6.	Перечислите техники сбора требований
 — Интервью. Самый универсальный путь выявления требований, заключающийся в общении проектного специалиста (как правило, специалиста по бизнесанализу) и представителя заказчика (или эксперта, пользователя и т.д.);
 — Работа с фокусными группами. Может выступать как вариант «расширенного интервью», где источником информации является не одно лицо, а группа лиц (как правило, представляющих собой целевую аудиторию, и/или обладающих важной для проекта информацией, и/или уполномоченных принимать важные для проекта решения);
 — Анкетирование. Этот вариант выявления требований вызывает много споров, т.к. при неверной реализации может привести к нулевому результату при объёмных затратах. В то же время при правильной организации анкетирование позволяет автоматически собрать и обработать огромное количество ответов от огромного количества респондентов;
 — Семинары и мозговой штурм. Семинары позволяют группе людей очень быстро обменяться информацией (и наглядно продемонстрировать те или иные 
идеи), а также хорошо сочетаются с интервью, анкетированием, прототипированием и моделированием — в том числе для обсуждения результатов и формирования выводов и решений. Мозговой штурм может проводиться и как часть семинара, и как отдельный вид деятельности;
 — Наблюдение. Может выражаться как в буквальном наблюдении за некими процессами, так и во включении проектного специалиста в эти процессы в качестве участника. С одной стороны, наблюдение позволяет увидеть то, о чём (по совершенно различным соображениям) могут умолчать интервьюируемые, анкетируемые и представители фокусных групп, но с другой — отнимает очень много времени и чаще всего позволяет увидеть лишь часть процессов;
 — Прототипирование. Состоит в демонстрации и обсуждении промежуточных версий продукта (например, дизайн страниц сайта может быть сначала представ лен в виде картинок, и лишь затем свёрстан);
 — Анализ документов. Хорошо работает тогда, когда эксперты в предметной области (временно) недоступны, а также в предметных областях, имеющих общепринятую устоявшуюся регламентирующую документацию;
 — Моделирование процессов и взаимодействий. Может применяться как к «бизнес-процессам и взаимодействиям» (например: «договор на закупку формируется отделом закупок, визируется бухгалтерией и юридическим отделом…»), 
так и к «техническим процессам и взаимодействиям» (например: «платёжное поручение генерируется модулем “Бухгалтерия”, шифруется модулем “Безопасность” и передаётся на сохранение в модуль “Хранилище”»). Данная техника требует высокой квалификации специалиста по бизнес-анализу, т.к. сопряжена с обработкой большого объёма сложной (и часто плохо структурированной) информации;
 — Самостоятельное описание. Является не столько техникой выявления требований, сколько техникой их фиксации и формализации. Очень сложно (и даже нельзя!) пытаться самому «придумать требования за заказчика», но в спокойной обстановке можно самостоятельно обработать собранную информацию и аккуратно оформить её для дальнейшего обсуждения и уточнения.

7.	Что такое Спецификация требований программного обеспечения (SRS)?
 — объединяющий в себе описание всех требований уровня продукта и может представлять собой весьма объёмный документ (сотни и тысячи страниц).

8.	Что такое Use Case?
Use case (также юзкейс, сценарий использования) – это сценарий взаимодействия пользователя (или пользователей) с программным продуктом для достижения конкретной цели.
Юзкейсы содержат следующие сведения:
 — кто использует сайт или приложение;
 — что пользователь хочет сделать;
 — цель пользователя;
 — шаги, которые делает пользователь, чтобы совершить определенное действие;
 — описание того, как сайт или приложение реагируют на действия пользователя.
Юзкейсы могут содержать следующие элементы (их количество зависит от сложности сценария):
 — Актор (actor) — тот, кто использует систему. Если взять за пример онлайн-магазин, там может быть несколько акторов: покупатели, продавцы, компании, занимающиеся доставкой, компании, проводящие платежи.
 — Стейкхолдер (stakeholder) — тот, кто заинтересован в определенном поведении системы. Зачастую это не конечный пользователь, а кто-то, получающий выгоду от функционирования системы. В случае с онлайн-магазином это может быть партнер — платежная платформа.
 — Первичное действующее лицо (primary actor) — человек или система, чьи цели достигаются при помощи нашего продукта. В онлайн-магазине это может быть основной дистрибьютор, чьи товары продаются на этой онлайн-платформе.
 — Предусловия и постусловия — что должно быть в наличии или должно произойти до и после запуска сценария использования.
 — Триггеры — события, запускающие юзкейс.
 — Успешный сценарий — юзкейс, при котором все идет по плану, без ошибок и неожиданностей.
 — Альтернативные пути — вариации основного успешного сценария на случай, если что-то пойдет не так на уровне системы.

9.	Приведите пример Use Case

Описание use case	Пользователь входит в систему, чтобы получить доступ к ее функционалу.
Акторы	                  Родители, Ученики, Учитель, Админ
Предусловия	Система должна быть подсоединена к сети
Постусловия	После успешного входа пользователю отсылается уведомление на mail id

Основные сценарии	               Номер	Шаги
Акторы/пользователи	1	Ввод username
                                                                        Ввод пароля
                                                      2	Проверить имя пользователя и пароль
                                                      3	Разрешить на вход в систему
Расширения	                 1a	Неверное имя пользователя
                                                                        Система выбрасывает сообщение об ошибке
                                                     2b	Неверный пароль
                                                                        Система выбрасывает сообщение об ошибке
                                                     3c	Неверный пароль введен 4 раза
                                                                        Приложение закрывается

10.	Перечислите Характеристики качества требований
 — Завершённость (completeness). Требование является полным и законченным с точки зрения представления в нём всей необходимой информации, ничто не пропущено по соображениям «это и так всем понятно»;
 — Атомарность, единичность (atomicity). Требование является атомарным, если его нельзя разбить на отдельные требования без потери завершённости и оно описывает одну и только одну ситуацию;
 — Непротиворечивость, последовательность (consistency). Требование не должно содержать внутренних противоречий и противоречий другим требованиям и документам;
 — Недвусмысленность (unambiguousness, clearness). Требование должно быть описано без использования жаргона, неочевидных аббревиатур и расплывчатых формулировок, должно допускать только однозначное объективное понимание и быть атомарным в плане невозможности различной трактовки сочетания отдельных фраз;
 — Выполнимость (feasibility). Требование должно быть технологически выполнимым и реализуемым в рамках бюджета и сроков разработки проекта;
 — Обязательность, нужность (obligatoriness) и актуальность (up-to-date). Если требование не является обязательным к реализации, оно должно быть просто исключено из набора требований. Если требование нужное, но «не очень важное», для указания этого факта используется указание приоритета (см. «проранжированность по…»). Также исключены (или переработаны) должны быть требования, утратившие актуальность;
 — Прослеживаемость (traceability). Прослеживаемость бывает вертикальной (vertical traceability) и горизонтальной (horizontal traceability96). Вертикальная позволяет соотносить между собой требования на различных уровнях требований, горизонтальная позволяет соотносить требование с тест-планом, тест-кейсами, архитектурными решениями и т.д;
 — Модифицируемость (modifiability). Это свойство характеризует простоту внесения изменений в отдельные требования и в набор требований. Можно говорить о наличии модифицируемости в том случае, если при доработке требований искомую информацию легко найти, а её изменение не приводит к нарушению иных описанных в этом перечне свойств;
 — Проранжированность по важности, стабильности, срочности (ranked100 for importance, stability, priority). Важность характеризует зависимость успеха проекта от успеха реализации требования. Стабильность характеризует вероятность  того, что в обозримом будущем в требование не будет внесено никаких изменений. Срочность определяет распределение во времени усилий проектной команды по реализации того или иного требования;
 — Корректность (correctness101) и проверяемость (verifiability). Фактически эти свойства вытекают из соблюдения всех вышеперечисленных (или можно сказать, что они не выполняются, если нарушено хотя бы одно из вышеперечисленных). В дополнение можно отметить, что проверяемость подразумевает возможность создания объективного тест-кейса (тест-кейсов), однозначно показывающего, что требование реализовано верно и поведение приложения в точности соответствует требованию;

11.	Приведите пример к каждой Характеристике качества требований
 — Завершённость (completeness).
 — Атомарность, единичность (atomicity).
 — Непротиворечивость, последовательность (consistency). 
 — Недвусмысленность (unambiguousness, clearness). 
 — Выполнимость (feasibility).
 — Обязательность, нужность (obligatoriness) и актуальность (up-to-date).
 — Прослеживаемость (traceability).
 — Модифицируемость (modifiability).
 — Проранжированность по важности, стабильности, срочности (ranked100 for importance, stability, priority).
 — Корректность (correctness101) и проверяемость (verifiability).

12.	Что такое Пользовательские истории(User story)?
Пользовательская история (user story) - общее описание функций программы, написанное как бы от имени пользователя. На современных проектах чаще используют именно ее для документирования требований. 
User story создается по шаблону:
“As a [persona], I [want to], [so that].”
«Как [тип клиента], [хочу то-то], [чтобы делать что-то]».

13.	Приведите пример Пользовательских историй(User story)
Как Макс, я хочу пригласить друзей, чтобы мы вместе могли пользоваться этим замечательным сервисом.
Как Саша, я хочу организовать свою работу, чтобы лучше контролировать ситуацию. 
Как менеджер, я хочу видеть, как продвигается работа у моих коллег, чтобы можно было составлять более точные отчеты о наших успехах и неудачах.

14.	Какие преимущества и недостатки Пользовательских историй(User story)?

15.	Что такое Критерии приемки(Acceptance criteria)?

16.	Перечислите виды и форматы критерий приемки

17.	Приведите пример критерий приемки- список правил

18.	Приведите пример критерий приемки- поведенческий сценарий
 
19.	Перечислите критерии INVEST для User story

20.	Назовите типы метрик тестирования. Каковы цели ввода метрик? Приведите примеры метрик.

21.	Что такое приемка приложения?

22.	Что такое аудит приложения?

23.	Этапы проведения аудита.

24.	Чем приемка приложения отличается от аудита?

