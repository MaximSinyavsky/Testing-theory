Задание 7

1.	Требования - это что?
Требование (requirement) — описание того, какие функции и с соблюдением каких условий должно выполнять приложение в процессе решения 
полезной для пользователя задачи.

2.	Для чего нужен Анализ требований в разработке программного обеспечения?
Цель анализа требований - определить потребности пользователей и перевести их в конкретные, измеримые и достижимые требования, которые команда разработчиков программного обеспечения может использовать для проектирования и разработки системы. Этот процесс также известен как разработка требований, и он является важнейшим этапом жизненного цикла разработки программного обеспечения (SDLC), поскольку помогает убедиться, что конечный продукт отвечает потребностям заинтересованных сторон и пользователей.
Анализ требований включает в себя несколько видов деятельности, таких как сбор требований от заинтересованных сторон, документирование и организация требований, проверка требований и создание документа с описанием требований. Этот документ служит планом для команды разработчиков программного обеспечения и используется для руководства проектированием, разработкой, тестированием и внедрением программной системы.
Важно отметить, что анализ требований - это итерационный процесс, который продолжается на протяжении всего SDLC, и по ходу проекта могут происходить изменения. Это означает, что процесс анализа требований должен быть достаточно гибким, чтобы учитывать изменения и обновления по мере их возникновения.

3.	Перечислите Виды требований
 — Бизнес-требования (business requirements) выражают цель, ради которой разрабатывается продукт (зачем вообще он нужен, какая от него ожидается польза, как заказчик с его помощью будет получать прибыль);
 — Пользовательские требования (user requirements) описывают задачи, которые пользователь может выполнять с помощью разрабатываемой системы (реакцию системы на действия пользователя, сценарии работы пользователя);
 — Бизнес-правила (business rules) описывают особенности принятых в предметной области (и/или непосредственно у заказчика) процессов, ограничений и иных правил. Эти правила могут относиться к бизнес процессам, правилам работы сотрудников, нюансам работы ПО и т.д;
 — Атрибуты качества (quality attributes) расширяют собой нефункциональные требования и на уровне пользовательских требований могут быть представлены в виде описания ключевых для проекта показателей качества (свойств продукта, не связанных с функциональностью, но являющихся важными для достижения целей создания продукта — производительность, масштабируемость, восстанавливаемость). Атрибутов качества очень много, но для любого проекта реально важными является лишь некоторое их подмножество;
 — Функциональные требования (functional requirements) описывают поведение системы, т.е. её действия (вычисления, преобразования, проверки, обработку и т.д.). В контексте проектирования функциональные требования в основном влияют на дизайн системы;
 — Нефункциональные требования (non-functional requirements) описывают свойства системы (удобство использования, безопасность, надёжность, расширяемость и т.д.), которыми она должна обладать при реализации своего поведения. Здесь приводится более техническое и детальное описание атрибутов качества. В контексте проектирования нефункциональные требования в основном влияют на архитектуру системы;

4.	Перечислите Функциональные уровни требований
Функциональные требования описывают, что делает система, это требования к первой составляющей качества — функциональности. Эти требования обычно ориентированы на действия (Когда пользователь нажимает кнопку «Обработать заказ», система сохраняет данные заказа в БД и определяет его статус как «В очереди на обработку»).
При определении функциональных требований следует искать золотую середину между слишком конкретизированной формулировкой требования и слишком общей и неоднозначной. Требования должны оставаться понятными заказчикам и стать более понятны разработчикам.
К функциональным требованиям относят:
 — Бизнес-требования. Что система должна делать с точки зрения бизнеса. Слово «бизнес» в данном контексте ближе к слову «заказчик». Пример бизнес-требования: промо-сайт, привлекающий внимание определенной аудитории к определенной продукции компании.
 — Пользовательские требования – описывают цели/задачи пользователей системы, которые должны достигаться/выполняться пользователями при помощи создаваемой программной системы. Эти требования часто представляют в виде вариантов использования. Иначе говоря, пользовательские требования — это что может сделать пользователь: зарегистрироваться, посмотреть определенную информацию, пересчитать данные по определенному алгоритму и прочее.
 — Функциональные требования – определяют функциональность (поведение) программной системы, которая должна быть создана разработчиками для предоставления возможности выполнения пользователями своих обязанностей в рамках бизнес-требований и в контексте пользовательских требований. Другими словами, что будут делать разработчики, чтобы выполнить пользовательские требования.
 — В группу функциональных требований относят и Системные требования. Эти характеристики могут описывать требования как к аппаратному обеспечению (тип и частота процессора, объём оперативной памяти, объём жесткого диска), так и к программному окружению (операционная система, наличие установленных системных компонентов и сервисов и т. п.). Обычно такие требования составляются производителем или автором ПО. Например, для игры это могут быть требования такого типа: видеокарта — объём памяти от 64 Мб, совместимость сDirectX 9.0b и новейшие драйвера. Для сайта: ОС — Windows не ниже XP, браузеры IE не ниже 7.0 и так далее.

Группа функциональных требований описывает, как система должна вести себя, когда ей предоставляются определенные входные данные или условия. Но одних функциональных требований недостаточно для полного описания требований к системе — необходимо также учитывать требования к другим составляющим качества, задаваемые нефункциональными требованиями. Иначе говоря, как будет работать система и почему именно так.

5.	Перечислите Нефункциональные уровни требований
Нефункциональные требования, соответственно, регламентируют внутренние и внешние условия или атрибуты функционирования системы. К. Вигерс [2] выделяет следующие основные группы нефункциональных требований:
 —  Бизнес-правила. Они определяют почему система работать должна именно так, как написано. Это могут быть ссылки на законодательство, внутренние правила заказчика и прочие причины. Часто упускают этот раздел и получается, что некоторые системные решения выглядят нетипичным и совсем неочевидными. Например, многие табачные компании и компании, производящие алкоголь требуют постоянного доказательства того, что промо-сайтами пользуются люди, достигшие определенного возраста. Это бизнес-правило (подтверждение возраста) возникает по требованию этических комитетов заказчика, хотя и несколько противоречит маркетинговым целям и требованиям по usability.
 — Внешние интерфейсы. Это не только интерфейсы пользователя, но и протоколы взаимодействия с другими системами. Например, часто сайты связаны с CRM системами. Особенности протокола взаимодействия «сайт-CRM» также относятся к нефункциональным требованиям.
 — Атрибуты качества. Атрибуты касаются вопросов прозрачности взаимодействия с другими системами, целостности, устойчивости и т.п. К таким характеристикам относятся:
— легкость и простота использования (usability)
— производительность (performance)
— удобство эксплуатации и технического обслуживания (maintainability)
— надежность и устойчивость к сбоям (reliability)
— взаимодействия системы с внешним миром (interfaces)
— расширяемость (scalability)
— требования к пользовательским и программным интерфейсам (user and software interface).
 — Ограничения – формулировки условий, модифицирующих требования или наборы требований, сужая выбор возможных решений по их реализации. В частности, к ним могут относиться параметры производительности, влияющие на выбор платформы реализации и/или развертывания (протоколы, серверы приложений, баз данных и т.д.). Ограничения часто основываются на бизнес-правилах.

6.	Перечислите техники сбора требований
 — Интервью. Самый универсальный путь выявления требований, заключающийся в общении проектного специалиста (как правило, специалиста по бизнесанализу) и представителя заказчика (или эксперта, пользователя и т.д.);
 — Работа с фокусными группами. Может выступать как вариант «расширенного интервью», где источником информации является не одно лицо, а группа лиц (как правило, представляющих собой целевую аудиторию, и/или обладающих важной для проекта информацией, и/или уполномоченных принимать важные для проекта решения);
 — Анкетирование. Этот вариант выявления требований вызывает много споров, т.к. при неверной реализации может привести к нулевому результату при объёмных затратах. В то же время при правильной организации анкетирование позволяет автоматически собрать и обработать огромное количество ответов от огромного количества респондентов;
 — Семинары и мозговой штурм. Семинары позволяют группе людей очень быстро обменяться информацией (и наглядно продемонстрировать те или иные 
идеи), а также хорошо сочетаются с интервью, анкетированием, прототипированием и моделированием — в том числе для обсуждения результатов и формирования выводов и решений. Мозговой штурм может проводиться и как часть семинара, и как отдельный вид деятельности;
 — Наблюдение. Может выражаться как в буквальном наблюдении за некими процессами, так и во включении проектного специалиста в эти процессы в качестве участника. С одной стороны, наблюдение позволяет увидеть то, о чём (по совершенно различным соображениям) могут умолчать интервьюируемые, анкетируемые и представители фокусных групп, но с другой — отнимает очень много времени и чаще всего позволяет увидеть лишь часть процессов;
 — Прототипирование. Состоит в демонстрации и обсуждении промежуточных версий продукта (например, дизайн страниц сайта может быть сначала представ лен в виде картинок, и лишь затем свёрстан);
 — Анализ документов. Хорошо работает тогда, когда эксперты в предметной области (временно) недоступны, а также в предметных областях, имеющих общепринятую устоявшуюся регламентирующую документацию;
 — Моделирование процессов и взаимодействий. Может применяться как к «бизнес-процессам и взаимодействиям» (например: «договор на закупку формируется отделом закупок, визируется бухгалтерией и юридическим отделом…»), 
так и к «техническим процессам и взаимодействиям» (например: «платёжное поручение генерируется модулем “Бухгалтерия”, шифруется модулем “Безопасность” и передаётся на сохранение в модуль “Хранилище”»). Данная техника требует высокой квалификации специалиста по бизнес-анализу, т.к. сопряжена с обработкой большого объёма сложной (и часто плохо структурированной) информации;
 — Самостоятельное описание. Является не столько техникой выявления требований, сколько техникой их фиксации и формализации. Очень сложно (и даже нельзя!) пытаться самому «придумать требования за заказчика», но в спокойной обстановке можно самостоятельно обработать собранную информацию и аккуратно оформить её для дальнейшего обсуждения и уточнения.

7.	Что такое Спецификация требований программного обеспечения (SRS)?
	Спецификация требований программного обеспечения (Software Requirements Specification, SRS) является документом, который описывает подробные функциональные и нефункциональные требования к разрабатываемому программному обеспечению. Она представляет собой один из первоочередных этапов в разработке программного продукта.
		Обычно в SRS включается следующая информация:
	Введение: Общее описание продукта, цели, область применения, определение терминов.
	Общее описание продукта: Высокоуровневое описание возможностей и целей, которые должны быть достигнуты с использованием программы.
	Требования пользователя: Описание потребностей пользователей и целевой аудитории, а также их основных потребностей относительно продукта.
	Функциональные требования: Описание того, что программа должна делать, включая функции, интерфейсы, обработку данных и другие функциональные аспекты.
	Нефункциональные требования: Такие как производительность, надежность, безопасность, совместимость и другие аспекты, которые не связаны непосредственно с функциональностью, но касаются качественных характеристик программы.
	Ограничения: Любые ограничения или ограничения на процесс разработки или функциональность программы.
	Аппаратные требования: Если необходимо, описание аппаратного обеспечения, на котором должна работать программа.
	Логические модели: Описание структуры данных, алгоритмов и других логических аспектов программы.
	Схемы баз данных: Описание структуры базы данных, таблиц, отношений.
	Спецификация требований программного обеспечения является ключевым документом, который используется в ходе всего жизненного цикла разработки программы и выполняет ряд важных функций, включая определение ожиданий, обеспечение понимания функциональности и обеспечение основы для тестирования и управления изменениями в ходе разработки.

8.	Что такое Use Case?
Use case (также юзкейс, сценарий использования) – это сценарий взаимодействия пользователя (или пользователей) с программным продуктом для достижения конкретной цели.
Юзкейсы содержат следующие сведения:
 — кто использует сайт или приложение;
 — что пользователь хочет сделать;
 — цель пользователя;
 — шаги, которые делает пользователь, чтобы совершить определенное действие;
 — описание того, как сайт или приложение реагируют на действия пользователя.
Юзкейсы могут содержать следующие элементы (их количество зависит от сложности сценария):
 — Актор (actor) — тот, кто использует систему. Если взять за пример онлайн-магазин, там может быть несколько акторов: покупатели, продавцы, компании, занимающиеся доставкой, компании, проводящие платежи.
 — Стейкхолдер (stakeholder) — тот, кто заинтересован в определенном поведении системы. Зачастую это не конечный пользователь, а кто-то, получающий выгоду от функционирования системы. В случае с онлайн-магазином это может быть партнер — платежная платформа.
 — Первичное действующее лицо (primary actor) — человек или система, чьи цели достигаются при помощи нашего продукта. В онлайн-магазине это может быть основной дистрибьютор, чьи товары продаются на этой онлайн-платформе.
 — Предусловия и постусловия — что должно быть в наличии или должно произойти до и после запуска сценария использования.
 — Триггеры — события, запускающие юзкейс.
 — Успешный сценарий — юзкейс, при котором все идет по плану, без ошибок и неожиданностей.
 — Альтернативные пути — вариации основного успешного сценария на случай, если что-то пойдет не так на уровне системы.

9.	Приведите пример Use Case

Описание use case	Пользователь входит в систему, чтобы получить доступ к ее функционалу.
Акторы	                  Родители, Ученики, Учитель, Админ
Предусловия	Система должна быть подсоединена к сети
Постусловия	После успешного входа пользователю отсылается уведомление на mail id

Основные сценарии	               Номер	Шаги
Акторы/пользователи	1	Ввод username
                                                                        Ввод пароля
                                                      2	Проверить имя пользователя и пароль
                                                      3	Разрешить на вход в систему
Расширения	                 1a	Неверное имя пользователя
                                                                        Система выбрасывает сообщение об ошибке
                                                     2b	Неверный пароль
                                                                        Система выбрасывает сообщение об ошибке
                                                     3c	Неверный пароль введен 4 раза
                                                                        Приложение закрывается

10.	Перечислите Характеристики качества требований
	1. Единичность — требование описывает одну и только одну вещь.
	2. Завершенность — требование полностью определено в одном месте и вся необходимая информация присутствует.
	3. Последовательность — требование не противоречит другим требованиям и полностью соответствует документации.
	4. Атомарность — требование нельзя разделить на более мелкие.
	5. Отслеживаемость — требование полностью или частично соответствует деловым нуждам как заявлено заинтересованными лицами и задокументировано.
	6. Актуальность — требование не стало устаревшим с течением времени.
	7. Выполнимость — требование может быть реализовано в рамках проекта.
	8. Недвусмысленность — требование определено без обращения к техническому жаргону, акронимам и другим скрытым формулировкам. Оно выражает объекты и факты, а не субъективные мнения. Возможна одна и только одна его интерпретация. Определение не содержит нечетких фраз, использование отрицательных и составных утверждений запрещено.
	9. Обязательность — требование представляет собой определенную заинтересованным лицом характеристику, отсутствие которой ведет к неполноценности решения, которая не может быть проигнорирована. Необязательное требование — противоречие самому понятия требования.
	10. Проверяемость — реализованность требования может быть проверена.приложения в точности соответствует требованию;

11.	Приведите пример к каждой Характеристике качества требований
 — Завершённость (completeness).
 — Атомарность, единичность (atomicity).
 — Непротиворечивость, последовательность (consistency). 
 — Недвусмысленность (unambiguousness, clearness). 
 — Выполнимость (feasibility).
 — Обязательность, нужность (obligatoriness) и актуальность (up-to-date).
 — Прослеживаемость (traceability).
 — Модифицируемость (modifiability).
 — Проранжированность по важности, стабильности, срочности (ranked100 for importance, stability, priority).
 — Корректность (correctness101) и проверяемость (verifiability).

12.	Что такое Пользовательские истории(User story)?
Пользовательская история (user story) - общее описание функций программы, написанное как бы от имени пользователя. На современных проектах чаще используют именно ее для документирования требований. 
User story создается по шаблону:
“As a [persona], I [want to], [so that].”
«Как [тип клиента], [хочу то-то], [чтобы делать что-то]».

13.	Приведите пример Пользовательских историй(User story)
Как Макс, я хочу пригласить друзей, чтобы мы вместе могли пользоваться этим замечательным сервисом.
Как Саша, я хочу организовать свою работу, чтобы лучше контролировать ситуацию. 
Как менеджер, я хочу видеть, как продвигается работа у моих коллег, чтобы можно было составлять более точные отчеты о наших успехах и неудачах.

14.	Какие преимущества и недостатки Пользовательских историй(User story)?
➕Истории — это краткое описание потребностей клиента. Они сконцентрированы на желаниях пользователей, поэтому помогают посмотреть на продукт, товар или услугу их глазами. В этом самая большая польза User Story.
➕Истории способствуют обсуждению идей в команде. Это помогает понять, каким образом лучше реализовать пожелания пользователей.
➕История описывает только одну функцию продукта, товара или услуги. Поэтому User Story подходит для методики Agile, так как описывает функцию для одного спринта.
➖User Story нужно писать без деталей, поэтому в команде могут по-разному понимать реализацию описанного действия. Без обсуждения деталей это чаще всего приводит к ошибкам в разработке продукта.
➖Недостаточно одной User Story, чтобы начать работу. Помимо истории следует подготовить много документов: составить техническое задание, написать список задач с ответственными, прописать ресурсы для их реализации.

15.	Что такое Критерии приемки(Acceptance criteria)?
Условия того, что задача/user story считается выполненной с точки зрения конечного пользователя. Другими словами, успешно выполняются пользовательские сценарии использования данного функционала.

16.	Перечислите виды и форматы критерий приемки

➖Критерии приемлемости, основанные на сценариях (Scenario-based acceptance criteria), используют шаблон для подробного описания конкретного поведения / последовательности действий пользователя;
Scenario-based acceptance criteria соответствует формату “Дано/Когда/Тогда” (“Given/When/Then”) (основан на BDD - behavior driven development):
Given /какой-то аспект, связанный с поведением пользователя/
When /пользователь выполняет определенное действие/
Then /происходит определенный результат/
Между ними в случае нескольких условий можно добавлять “И” (“AND”).

➖ Критерии приемлемости на основе правил (Rule-based acceptance criteria) - это скорее простой список того, как функция должна выглядеть / работать;
Rule-Based Acceptance Criteria - это простой список «правил» о том, как функция должна выглядеть / работать:
Все кнопки должны быть определенного цвета;
Кнопка входа должна перенаправлять пользователя в определенный раздел;
Кнопка регистрации должна находиться в определенной области;
Все кнопки должны быть серыми, если не выполняются определенные требования;
и многое другое;
Хотя критерии, основанные на правилах, имеют более простой формат, нет причин, по которым они не могут быть длинными и подробными.

17.	Приведите пример критерий приемки- список правил
Кнопка регистрации должна быть красной;

18.	Приведите пример критерий приемки- поведенческий сценарий
При входе нового пользователя в аккаунт, появляется всплывающее окно с приветствием.
 
19.	Перечислите критерии INVEST для User story
INVEST — критерии хорошей истории:
Independent — независимая от других историй, то есть истории могут быть реализованы в любом порядке
Negotiable — обсуждаемая, отражает суть, а не детали; не содержит конкретных шагов реализации
Valuable — ценная для клиентов, бизнеса и стейкхолдеров
Estimable — оцениваемая по сложности и трудозатратам
Small — компактная, может быть сделана командой за одну итерацию
Testable — тестируемая (например, имеет критерии приемки)

20.	Назовите типы метрик тестирования. Каковы цели ввода метрик? Приведите примеры метрик.
	Цели введения метрик в разработке программного обеспечения:
	Оценка производительности: Метрики используются для оценки производительности процесса разработки, качества кода и эффективности команды разработчиков. Такие метрики могут включать время разработки, объем выпущенного кода, количество ошибок и т.д.
	Контроль качества: Метрики помогают в оценке качества ПО. Это включает в себя измерение количества дефектов, степень их серьезности и скорость их устранения, что позволяет судить о здоровье проекта.
	Улучшение процессов: Метрики могут помочь идентифицировать узкие места в процессе разработки, что в свою очередь позволяет внести улучшения для оптимизации процесса.
	Принятие обоснованных решений: Метрики предоставляют фактические данные, которые могут быть использованы для обоснованного принятия решений. Например, метрики могут помочь в определении того, насколько успешно были реализованы новые функции или изменения в проекте.
	Отслеживание прогресса: Метрики дают возможность отслеживать прогресс в различных аспектах разработки. Это позволяет вовремя реагировать на проблемы и улучшать работу команды.
	Улучшение управления проектом: Метрики могут быть использованы для улучшения управления проектом, включая оценку рисков, планирование и принятие решений.
	В целом, введение метрик в разработку программного обеспечения позволяет создать более прозрачные процессы, улучшить качество ПО и процесса разработки, а также помогает в принятии обоснованных решений на основе фактических данных.

	Метрики тестирования используются для измерения эффективности процесса тестирования, качества разрабатываемого программного обеспечения и успешности тестирования. Вот несколько типов метрик тестирования:
	Метрики покрытия кода (Code Coverage Metrics): Они измеряют объем кода, который был протестирован тестовыми сценариями. Примеры включают линии кода, ветвления или условия в коде, покрытые тестами.
	Метрики дефектов (Defect Metrics): Эти метрики оценивают количество, типы и степень критичности выявленных дефектов в течение цикла тестирования. Примеры включают количество обнаруженных дефектов, время от обнаружения до решения и т.д.
	Метрики эффективности тестирования (Test Effectiveness Metrics): Они помогают оценить эффективность проведенных тестов. Примеры включают количество обнаруженных дефектов в зависимости от типа теста, степень повторяемости дефектов, время, затраченное на выполнение тестов и т.д.
	Метрики производительности (Performance Metrics): Оценивают производительность приложения или системы в результате тестирования, включая скорость выполнения, использование ресурсов и т.д.
	Метрики стабильности (Reliability Metrics): Они оценивают стабильность ПО и системы, включая частоту сбоев, аварий и времени восстановления после отказов.
	Метрики покрытия функциональности (Functional Coverage Metrics): Эти метрики оценивают, в какой степени тесты покрывают функциональные требования приложения или системы.
	Метрики производительности тестирования (Testing Productivity Metrics): Оценка производительности тестирования, включая количество тест-кейсов, завершенных за определенный период времени, количество дефектов, выявленных на единицу времени и т.д.
	Каждая из этих метрик играет важную роль в улучшении процесса тестирования, обеспечивая более полное и информативное представление о качестве тестируемого продукта.

		Примеры метрик:
	Метрики покрытия кода (Code Coverage Metrics):
Покрытие строк кода (Line Coverage): Процент строк кода, который был протестирован.
Покрытие ветвлений (Branch Coverage): Процент ветвлений в коде, которые были достигнуты тестами.
	Метрики дефектов (Defect Metrics):
Количество дефектов: Общее количество выявленных дефектов в процессе тестирования.
Время до обнаружения (Time to Detect): Время, затраченное от момента внедрения дефекта до его обнаружения.
Уровень критичности дефектов: Классификация дефектов по уровню их влияния на работоспособность системы.
	Метрики эффективности тестирования (Test Effectiveness Metrics):
Количество ложноположительных и ложноотрицательных результатов: Оценка точности тестов в обнаружении дефектов.
Количество повторных дефектов: Количество дефектов, которые возникают снова после их исправления.
	Метрики производительности (Performance Metrics):
Время отклика (Response Time): Время, затраченное на выполнение операций в системе.
Пропускная способность (Throughput): Объем данных или транзакций, обработанных системой за единицу времени.
	Метрики стабильности (Reliability Metrics):
MTBF (Mean Time Between Failures): Среднее время между отказами системы.
MTTR (Mean Time To Recover/Repair): Среднее время восстановления после отказа.
	Метрики покрытия функциональности (Functional Coverage Metrics):
Покрытие функциональных требований: Процент выполненных функциональных требований.
	Метрики производительности тестирования (Testing Productivity Metrics):
Количество выполненных тест-кейсов за период времени: Оценка производительности тестировщиков.	

21.	Что такое приемка приложения?
Приемка приложения - это процесс проверки и оценки приложения или программного обеспечения перед его пуском в эксплуатацию. Этот процесс обычно включает в себя серию тестов и проверок, чтобы удостовериться, что приложение соответствует заявленным требованиям и работает корректно.
В процессе приемки приложения обычно проводятся тесты на функциональность, производительность, безопасность, совместимость с различными устройствами и операционными системами, а также проверяется, соответствует ли приложение установленным стандартам.
После завершения процесса приемки руководство или заказчик принимает решение о том, готово ли приложение к запуску или требуется доработка.

22.	Что такое аудит приложения?
	Аудит приложения - это процесс тщательного анализа программного обеспечения с целью проверки его эффективности, безопасности, производительности, а также соответствия заданным требованиям.
	Такие аудиты могут включать в себя изучение исходного кода приложения, его архитектуры, тестовые сценарии, а также процессы разработки. Это позволяет обнаруживать потенциальные проблемы или недочеты в приложении до его выпуска или после, что позволяет разработчикам улучшать качество своего продукта.
	Аудит приложения может проводиться специалистами по информационной безопасности для выявления потенциальных уязвимостей, а также специалистами по качеству программного обеспечения для оценки соответствия функциональных и нефункциональных требований.
	
23.	Этапы проведения аудита.
	Проведение аудита приложения обычно включает в себя ряд этапов, вот основные из них:
	Планирование: В этой фазе аудиторы определяют цели аудита, обсуждают требования и ожидания заказчика, определяют область аудита (например, безопасность, производительность, функциональность) и разрабатывают план действий.
	Сбор информации: На этом этапе аудиторы собирают информацию о приложении, которое будет аудироваться. Это может включать в себя изучение документации, доступ к исходному коду, а также любые другие релевантные материалы.
	Анализ и оценка: Аудиторы проводят анализ приложения с соответствующим фокусом (например, безопасность, производительность, пользовательский опыт) с помощью инструментов и методов, а также сравнивают его с определенными стандартами и требованиями.
	Выявление проблем: На этом этапе выявляются проблемы, недочеты или потенциальные уязвимости в приложении, которые могут оказать влияние на его работоспособность, безопасность или удовлетворение требований.
	Формирование отчета: Детальный отчет подготавливается для заказчика, в котором описываются найденные проблемы, предлагаются рекомендации по исправлению недостатков и повышению качества приложения.
	Подготовка рекомендаций и планов действий: На основе результатов аудита формулируются рекомендации и конкретные шаги для улучшения приложения, устранения обнаруженных проблем и обеспечения соответствия стандартам и требованиям.
	Последующее исполнение рекомендаций: После завершения аудита заказчик или разработчики приложения приступают к исполнению рекомендаций, устраняя выявленные проблемы, внося изменения и улучшения в приложение.
	Каждый этап важен для обеспечения полного и всестороннего аудита приложения с целью выявить и исправить как можно больше потенциальных проблем.

24.	Чем приемка приложения отличается от аудита?
	Приемка приложения и аудит имеют разные цели и осуществляются в различных контекстах.
	Приемка приложения обычно происходит внутри или между отделами разработки или компании-заказчика при завершении разработки или модификации приложения. Основная цель приемки - это проверка соответствия разработанного приложения заранее установленным требованиям. Приемка включает в себя проверку функциональности, соответствия дизайну, работоспособности и других технических характеристик согласно спецификации.
	Это внутренний процесс, который обычно проводится командой разработчиков, тестировщиков и заказчика или его представителей. Если в процессе приемки выявляются недочеты, они обсуждаются с командой разработки и вносятся изменения до тех пор, пока приложение не будет принято.
	Аудит приложения, с другой стороны, обычно проводится независимой стороной, которая не вовлечена в процесс разработки. Целью аудита является исследование приложения на предмет обнаружения проблем, ошибок, уязвимостей, а также соответствия стандартам или регулятивным требованиям.
	В отличие от приемки, аудит приложения часто проводится экспертами, специализирующимися на определенных областях (например, информационная безопасность, производительность, юзабилити и т.д.), и нацелен на выявление проблем, которые могут потенциально повлиять на безопасность, надежность, производительность и удовлетворение потребностей конечного пользователя.
	Таким образом, если приемка оценивает соответствие приложения заранее установленным требованиям и обычно проводится внутри компании разработчика или заказчика, то аудит приложения направлен на выявление возможных проблем и обычно выполняется независимой стороной извне.
