Задание 4

1.	Что такое Тест дизайн?
	Тест-дизайн – это этап процесса тестирования ПО, на котором проектируются и создаются тестовые случаи (тест-кейсы) в соответствии с определёнными ранее критериями качества и целями тестирования.

2.	Для чего нужны Техники тест дизайна?
	Техники тест-дизайна служат для разработки качественных тест-кейсов. Поскольку исчерпывающее тестирование невозможно, техники ручного тестирования позволяют сократить количество выполняемых тест-кейсов и увеличить тестовое покрытие. Они помогают выявить условия тестирования, которые иначе трудно распознать.

3.	Что такое Классы эквивалентности?
	Суть техники в том, что из массива данных тестируется одно значение из каждого класса. Например, у банка есть свои правила по выдаче кредитов:
 — Не выдавать людям до 18 лет — первая граница.
 — Выдавать людям с 18 до 65 лет — вторая граница.
 — Не выдавать пенсионерам с 65 до 100 лет — третья граница.  
	Если тестировщик будет проверять все 100 значений от 0 до 99, ему придётся поработать со 100 кейсами — это займёт много времени. Оптимальнее будет разделить весь массив на группы, которые будут давать один и тот же результат, и протестировать всего три значения вместо 100. При любом значении от 0 до 18 лет система должна однозначно выдавать отказ в кредите, а при значении от 18 до 65 — согласие, а при значении от 65 до 100 — снова отказ. Значит, достаточно взять по одному значению в каждой группе, чтобы протестировать функцию. 

4.	Что такое Граничные значения?
	Существует теория, что ошибки часто случаются на границах классов. Пользователи постоянно ошибаются в датах, если отправление рейса происходит ночью, в незначительно отличающихся размерах одежды, в возрасте, если его нужно определить на конкретную дату. Техника граничных значений как раз тестирует функции на стыке границ. 
 	Вернёмся к нашему примеру с кредитным калькулятором. Банк не даёт кредиты людям до 18 лет. Возникает вопрос: до 18 лет включительно? Разработчики и аналитики могли упустить этот момент в разработке требований, соответственно, на границе между 17 и 19 будут скапливаться ошибки. 
	Например, если по условиям банк не даёт кредиты клиентам до 18 лет включительно, то человек в 18 лет имеет право взять кредит. Но если разработчики допустили ошибку, то при вводе возраста в 18 лет система будет автоматически выдавать отказ.
	Суть техники граничных значений ― найти ошибки в работе продукта на границах классов. В нашем примере тестировщик знает границу и проверяет приграничную область, делая шаг в глубь и за пределы диапазона, то есть тестирует систему на правильный ответ при вводе значений 17, 18 и 19 лет.  	

5.	Что такое Таблица принятия решений?
	Эта техника тест-дизайна используется, когда нужно протестировать систему со множеством параметров и вариантов развития событий. Суть техники в том, что при всевозможных сочетаниях нескольких параметров тестировщик получает разный результат. Важно подобрать нестандартные, редко встречающиеся сочетания, и убедиться, что система корректно их обрабатывает. Как правило, это сочетания, которые не должны случаться, но теоретически могут существовать ― узкие места системы. 
	На примере кредитного калькулятора выделим параметры, при соблюдении которых банк выдаст кредит: 
 — возраст от 18 до 65 лет;
 — работающий; 
 — с понятной целью — например, автокредит, потребительский или ипотечный. 
	Различные комбинации трёх параметров приводят к разному, заранее заложенному  поведению системы.
	Существенный минус техники принятия решений — её объёмность и трудозатратность. С другой стороны, метод позволяет выявить те ошибки, которые пропустят методы эквивалентного разделения и граничных значений. Его трёхмерность позволяет найти такие уникальные сочетания и ошибки, которые тестировщик обычно не предполагает увидеть.  

6.	Что такое Попарное тестирование?
	Эта техника тест-дизайна применяется, когда нужно проверить корректность работы системы по нескольким параметрам. Суть метода заключается в том, чтобы каждое значение хотя бы раз побывало в одной точке с другим значением. Техника попарного тестирования позволяет избежать избыточных проверок и сократить количество генерируемых тест-кейсов. Главный смысл техники попарного тестирования — оптимизировать время, которое тестировщик затратит на проверку.
	Например, тестировщику нужно проверить работу браузерного приложения:
 — в трёх операционных системах — Windows, MacOS, Linux;
 — в трёх браузерах — Google Chrome, Яндекс Браузер, Mozilla Firefox;
 — на двух языках — английском и русском. 
	Максимальное количество тест-кейсов в этой ситуации — 18: три операционные системы в трёх браузерах и на двух языках. Проверять 18 тест-кейсов долго и трудозатратно. По количеству пар можно сократить количество кейсов — в итоге нужно будет протестировать не 18, а только 9 кейсов.

7.	Что такое диаграмма пользовательских ролей?
	Диаграмма вариантов использования (или диаграмма прецедентов) в языке UML (Unified Modeling Language) используется для описания функциональности системы с точки зрения пользователей. Она показывает различные способы использования системы через взаимодействие актеров (пользователей) с различными функциональными частями системы.
	Диаграмма вариантов использования включает в себя актеров, варианты использования (или прецеденты) и связи между ними. Актеры представляют различные типы пользователей или внешние системы, которые взаимодействуют с системой. Варианты использования описывают конкретные функциональные возможности системы.
	Актеры и варианты использования соединяются отношением «включение» или «расширение» для описания отношений между ними и демонстрации возможных сценариев использования системы.
	Диаграмма вариантов использования часто используется на начальной стадии проектирования для иллюстрации взаимодействия пользователей с системой и предоставления общего понимания о ее функциональности.

8.	Перечислите Комбинаторные техники тест дизайна и опишите их.
	Комбинаторные техники тест-дизайна представляют собой методы для создания тестовых случаев, позволяющие обеспечить тестирование максимального количества возможных комбинаций входных данных с минимальным количеством тестов. Это позволяет эффективно обнаруживать ошибки, связанные с различными комбинациями параметров, при минимальных усилиях.
	Метод парных комбинаций (Pairwise Testing): Это метод, при котором для каждой пары входных параметров создаются тестовые случаи, чтобы обеспечить покрытие всех возможных парных комбинаций входных данных. Этот метод позволяет существенно сократить количество тестов без потери покрытия.
	Метод троек (Three-Wise Testing): Этот метод расширяет идею метода парных комбинаций, фокусируясь на том, чтобы каждая возможная тройка входных параметров также была протестирована. Это увеличивает покрытие комбинаций параметров.
	Метод n-точечных комбинаций (n-wise testing): Более общий метод, по сути, увеличивающий покрытие всех комбинаций n параметров. Чем выше значение n, тем больше комбинаций входных данных будет протестировано.
	Ортогональные массивы (Orthogonal Arrays): Это метод, позволяющий создавать небольшие, но разнообразные наборы тестов, покрывающие множество комбинаций параметров, но при этом потребляющие меньше ресурсов по сравнению с полным комбинаторным перебором.
	Комбинаторные техники тест-дизайна способствуют более эффективному тестированию путем уменьшения количества тестов, необходимых для покрытия всех комбинаций входных данных, что в свою очередь позволяет обнаруживать ошибки, связанные с комбинациями параметров, при меньших затратах.