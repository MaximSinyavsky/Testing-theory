Задание 6

1.	Что такое Ошибка/Дефект/Отказ?
	Ошибка (Bug): В разработке программного обеспечения "ошибка" обычно относится к ошибке в коде, которая приводит к неправильной функциональности программы. Это может быть результатом опечатки, неправильной логики, неверного предположения или других проблем в коде. Когда разработчики находят ошибку, они должны исправить ее, чтобы программа работала корректно.
	Дефект (Defect): Термин "дефект" часто используется в процессе тестирования программного обеспечения. Дефект возникает, когда программа или система не соответствует спецификациям или ожиданиям пользователя. Дефект может быть как результатом ошибки в коде (бага), так и проектировочного или функционального недочета. Когда тестировщики обнаруживают дефект, они документируют его и отслеживают процесс исправления.
	Отказ (Failure): "Отказ" обычно используется для описания некорректной работы программы в реальной среде. Когда программа не выполняет свои функции или делает это неправильно, это считается отказом. Отказ может произойти из-за наличия дефектов или ошибок, приведенных в коде программы. Отказ может также быть вызван внешними факторами, такими как аппаратные сбои, неправильные действия пользователей и другие.

2.	Перечислите Основные типы багов?
	Синтаксические ошибки: Такие ошибки возникают из-за неправильного синтаксиса кода, что приводит к невозможности компиляции программы.
	Логические ошибки: Неверная логика в программе, что приводит к неверному или нежелательному поведению программы при её выполнении.
	Ошибки времени выполнения: Эти ошибки возникают в процессе выполнения программы из-за некорректных операций или неправильных данных. Примеры включают деление на ноль, попытки доступа к несуществующей памяти и другие.
	Ошибки ввода/вывода данных: Проблемы, связанные с неправильной обработкой входных и выходных данных, включая некорректную обработку пользовательского ввода или ошибки при записи/чтении данных из файлов или баз данных.
	Проблемы сети: Ошибки, возникающие из-за неправильной работы сети, включая ошибки соединения, обработки сетевых запросов и маршрутизации данных.
	Проблемы производительности: Включают утечки памяти, медленную скорость выполнения, высокое потребление ресурсов и другие проблемы, влияющие на производительность программы.
	Проблемы совместимости: Баги, которые возникают из-за несовместимости программного обеспечения с определенными платформами, системами или окружениями.
	Проблемы безопасности: Ошибки в безопасности, которые приводят к уязвимостям, несанкционированному доступу, утечкам информации или другим угрозам для информационной безопасности.

3.	Перечислите “Хитрые баги”?
	Хитрые баги (tricky bugs) – это те, которые сложно обнаружить, воспроизвести и исправить. Они часто приводят к неожиданным и сложным последствиям в работе программы. Вот несколько примеров:
	Гонка данных (Race Condition):
Пример - Одновременный доступ к общим ресурсам. В многопоточном приложении один поток пытается читать данные, в то время как другой поток пытается записать данные в то же самое место. Это может вызвать ошибки чтения или записи, потерю данных и другие непредсказуемые последствия.
	Недетерминированное поведение:
Пример - Приложение дает разные результаты при одних и тех же входных данных в разное время из-за зависимостей от внешних факторов или неочевидных состояний.
	Подвисание (Deadlock):
Пример - Два или более процесса блокируют друг друга, ожидая ресурсы, которые удерживают другие процессы.
	Утечка ресурсов (Resource Leak):
Пример - Забытые указатели, открытые файлы или выделенная память, которые больше не используются, но не были освобождены. Это может привести к исчерпанию ресурсов системы.
	Скрытая ошибка в бизнес-логике:
Пример - Ошибка в расчетах, которая может проявиться только в специфических условиях, например, при определенной последовательности операций, неявных предположениях о данных и т. д.
	Решение таких проблем обычно требует глубокого понимания кода, тщательного тестирования различных сценариев использования и изучения логов для выявления скрытых взаимосвязей.

4.	Приведите пример Blocker bug
	"Blocker bug" - это термин, используемый в разработке программного обеспечения для обозначения критической ошибки, которая препятствует нормальной работе системы. Такие ошибки могут быть серьёзным препятствием для продолжения разработки или использования программного продукта. Вот пример "blocker bug":
	Предположим, у веб-приложения для онлайн-торговли обнаруживается ошибка, из-за которой пользователи не могут завершить процесс оплаты. Даже после ввода всех данных оплаты и подтверждения покупки, пользователи получают сообщение об ошибке и платеж не проходит. Это могло бы быть классифицировано как "blocker bug", потому что оно непосредственно влияет на ключевую функциональность приложения, препятствует завершению транзакций и, таким образом, препятствует основной цели приложения – совершению покупок.
	Команда разработки немедленно займется этой проблемой, поскольку она негативно влияет на бизнес и пользователей. Обычно такие проблемы имеют высокий приоритет и рассматриваются как неотложные для решения.

5.	Приведите пример Critical bug
	"Critical bug" - это термин, который обычно используется для обозначения серьезной ошибки в программном обеспечении, которая может привести к серьезным последствиям, таким как потеря данных, системный сбой или угроза безопасности.
	В медицинской информационной системе существует ошибка, из-за которой результаты анализов пациентов периодически перепутываются, что может привести к неправильному назначению лечения. Это критическая ошибка, так как она прямо влияет на здоровье пациентов и может иметь серьезные медицинские последствия.
	Команда разработки и ИТ-специалисты должны тут же приступить к идентификации и устранению этой проблемы, поскольку она может привести к непоправимым последствиям и имеет прямое отношение к здоровью и благополучию людей.

6.	Приведите пример Major bug
	"Major bug" - это термин, обозначающий значительную ошибку в программном обеспечении, которая может вызвать серьезное нарушение функциональности, но, в отличие от critical bug, не представляет угрозы для безопасности или жизненно важных функций.
	В веб-приложении для онлайн-покупок скидка в 50% автоматически применяется ко всем товарам в корзине, независимо от их типа или бренда. Это приводит к значительным потерям прибыли для компании, поскольку скидка не должна автоматически применяться к определенным товарам или брендам. Этот дефект серьезно влияет на финансовые показатели компании, но не представляет угрозы для безопасности или жизненно важных функций.
	Для решения данной проблемы команда разработки и техническая поддержка должны провести тщательное тестирование и исправить это поведение, чтобы избежать потерь прибыли и обеспечить правильную работу системы онлайн-продаж.
Исправление major bug является важным, поскольку оно напрямую влияет на опыт пользователей и финансовую устойчивость компании, но не требует немедленной реакции, как это случается с critical bug.

7.	Приведите пример Minor bug
	Минорная ошибка (minor bug) обычно является незначительным дефектом в программном обеспечении, который не приводит к серьезным нарушениям работы системы и не влияет на ее ключевую функциональность. Вот пример такой ошибки:
	В текстовом редакторе неверно отображается количество слов в документе в случае, если в тексте присутствуют знаки препинания и специальные символы. Например, при наличии апострофов или дефисов количество слов может быть неверно посчитано. Хотя это может быть раздражающим, особенно для людей, которые работают с текстом, это не представляет критической проблемы и не влияет на возможность сохранения и редактирования документов.
	Для решения такой ошибки команда разработки может рассмотреть оптимизацию алгоритма подсчёта слов в тексте и обновить соответствующий функционал без причинения значительных помех в общей работоспособности программы.

8.	Приведите пример Trivial bug
	Trivial bug (мелкая ошибка) обычно представляет собой наименее значимый тип дефекта в программном обеспечении. Вот пример такой ошибки:
	В текстовом редакторе в подменю "Стиль" встречается опечатка – вместо "Курсив" написано "Курсивв". Это незначительная опечатка в пользовательском интерфейсе, которая не влияет на возможность пользователей изменять форматирование текста в документах.
	Для решения такой ошибки команда разработки может просто обновить текст в пользовательском интерфейсе без внесения каких-либо изменений в программную логику, поскольку эта опечатка не влияет на общее функционирование программы.

9.	Какой жизненный цикл Bug report?
	Отчёт о дефекте (defect report) — документ, описывающий и приоритизирующий обнаруженный дефект, а также содействующий его устранению.
	Отчёт о дефекте (и сам дефект вместе с ним) проходит определённые стадии жизненного цикла:
	Обнаружен (submitted) — начальное состояние отчёта (иногда называется «Новый» (new)), в котором он находится сразу после создания. Некоторые средства также позволяют сначала создавать черновик (draft) и лишь потом 
публиковать отчёт.
	Назначен (assigned) — в это состояние отчёт переходит с момента, когда ктото из проектной команды назначается ответственным за исправление дефекта. Назначение ответственного производится или решением лидера команды разработки, или коллегиально, или по добровольному принципу, или иным принятым в команде способом или выполняется автоматически на основе определённых правил.
	Исправлен (fixed) — в это состояние отчёт переводит ответственный за исправление дефекта член команды после выполнения соответствующих действий по исправлению.
	Проверен (verified) — в это состояние отчёт переводит тестировщик, удостоверившийся, что дефект на самом деле был устранён. Как правило, такую проверку выполняет тестировщик, изначально написавший отчёт о дефекте.
	Закрыт (closed) — состояние отчёта, означающее, что по данному дефекту не планируется никаких дальнейших действий (хотя, конечно, ничто не мешает в будущем этому дефекту стать «открытым заново» (reopened)).
	Открыт заново (reopened) — в это состояние (как правило, из состояния «Исправлен») отчёт переводит тестировщик, удостоверившийся, что дефект попрежнему воспроизводится на билде, в котором он уже должен быть исправлен.
	Рекомендован к отклонению (to be declined) — в это состояние отчёт о дефекте может быть переведён из множества других состояний с целью вынести на рассмотрение вопрос об отклонении отчёта по той или иной причине. Если рекомендация является обоснованной, отчёт переводится в состояние «Отклонён» (см. следующий пункт).
	Отклонён (declined) — в это состояние отчёт переводится в случаях, подробно описанных в пункте «Закрыт», если средство управления отчётами о дефектах предполагает использование этого состояния вместо состояния «Закрыт» для тех или иных резолюций по отчёту.
	Отложен (deferred) — в это состояние отчёт переводится в случае, если исправление дефекта в ближайшее время является нерациональным или не представляется возможным, однако есть основания полагать, что в обозримом будущем ситуация исправится (выйдет новая версия библиотеки, вернётся из отпуска специалист по некоей технологии, изменятся требования заказчика и т.д.).

10.	Какие основные цели локализации дефекта?
	Цели локализации дефекта, или поиска ошибок, включают в себя следующее:
	Выявление проблемы: Главная цель локализации дефекта - найти и идентифицировать проблему в программном обеспечении. Это важный шаг для того, чтобы исправить ошибку и улучшить качество программы.
	Репродукция: Чтобы успешно локализовать дефект, необходимо воспроизвести его. Это позволяет разработчикам и тестировщикам идентифицировать шаги, которые привели к возникновению ошибки, и убедиться, что она воспроизводится систематически.
	Ограничение дефекта: Локализация помогает установить ограничения и контекст, в которых возникает ошибка. Например, определить, что ошибка проявляется только при определенных условиях, с определенными данными или на конкретной платформе.
	Изоляция причины: Как только дефект локализован, цель состоит в том, чтобы изолировать причину проблемы. Это включает в себя анализ кода, алгоритмов, входных данных, окружения выполнения, или других факторов, влияющих на появление ошибки.
	Создание воспроизводимого теста: Результатом процесса локализации является создание тестового случая или сценария, который может быть использован для проверки исправления дефекта и предотвращения его возникновения в будущем.
	Повышение качества: Локализация дефектов помогает в повышении общего качества программного обеспечения путем устранения ошибок и предотвращения их повторного возникновения.
	Локализация дефектов играет важную роль в процессе разработки программного обеспечения, поскольку позволяет обнаружить и устранить проблемы, улучшая стабильность, безопасность и производительность разрабатываемого продукта.

11.	Где могут находиться дефекты?
	Дефекты (или ошибки) могут находиться в различных местах в процессе разработки программного обеспечения. Вот некоторые из распространенных мест, где могут находиться дефекты:
	Код: Это наиболее очевидное место, где могут находиться дефекты - внутри самого программного кода.
	Интеграция: Ошибки могут возникать в процессе интеграции нескольких частей программного обеспечения, особенно если они разрабатывались разными командами или на разных технологических стеках.
	Данные: Иногда ошибки могут возникать из-за неожиданных данных, которые обрабатываются программой. Некорректные или неожиданные данные могут вызвать сбои.
	Интерфейс пользователя: Дефекты могут быть связаны с пользовательским интерфейсом - например, неправильное отображение информации или некорректное поведение элементов управления.
	Логика приложения: Ошибки также могут возникать из-за неправильной логики внутри приложения, что может привести к нежелательным последствиям.
	Системное окружение: Иногда проблемы могут возникать из-за особенностей операционной системы, конфигурации сервера или других аспектов системного окружения.
	Требования и спецификации: Если требования не были должным образом поняты или документированы, это может привести к разработке с ошибками.
	Тестовые сценарии: Даже тестовые сценарии могут содержать ошибки, что может привести к неправильному обнаружению дефектов или пропуску некоторых проблем.
	Архитектура: Проблемы могут возникать из-за неудачной архитектуры приложения или несовместимости между различными компонентами приложения.
	Это лишь несколько примеров. Дефекты могут возникать практически в любом аспекте разработки программного обеспечения и могут быть обусловлены как техническими проблемами, так и проблемами в управлении проектом.

12.	Перечислите методы локализации дефекта в клиентской части.
	Локализация дефектов в клиентской части программного обеспечения - это критически важный этап в разработке, который включает в себя использование различных методов для выявления и устранения проблем. Вот некоторые методы, которые могут быть использованы для локализации дефектов в клиентской части:
	Тестирование сценариев использования: Создание и выполнение тестовых сценариев, которые покрывают основные функции и возможные пути взаимодействия с клиентской частью приложения.
	Отладка в браузере: Использование инструментов разработчика в браузере для отслеживания, профилирования и отладки кода JavaScript, анализа сетевого трафика и изменений DOM.
	Тестирование совместимости и респонсивности: Проверка работы приложения на различных браузерах, платформах и устройствах для обнаружения дефектов, которые могут возникать из-за различий в окружении.
	Тестирование производительности: Оценка скорости загрузки, отзывчивости интерфейса и общей производительности приложения в различных условиях (например, медленное соединение или высокая нагрузка).
	Тестирование ввода данных: Проверка корректности обработки и визуализации пользовательского ввода, такого как форматы данных, ограничения на ввод, и обработка ошибок.
	Анализ кода и ресурсов: Обзор исходного кода, включая HTML, CSS и JavaScript, для выявления потенциальных проблемных мест.
	Использование инструментов записи и воспроизведения действий пользователя: Инструменты, позволяющие автоматизировать ввод действий пользователя для последующего воспроизведения, могут помочь в обнаружении и устранении дефектов, связанных с конкретными последовательностями действий.
	Сбор обратной связи от пользователей: Активный сбор фидбэка от пользователей позволяет выявить и решить проблемы, с которыми они сталкиваются при использовании приложения.
	Эти методы могут быть использованы в комбинации для обнаружения и устранения дефектов в клиентской части приложения, обеспечивая более надежное и удобное взаимодействие для пользователей.

13.	Перечислите методы локализации дефекта в серверной части.
	Локализация дефектов в серверной части программного обеспечения имеет ключевое значение для обеспечения его надежной работы. Ниже перечислены методы, которые могут применяться для локализации дефектов в серверной части:
	Логирование и мониторинг: Использование систем логирования для записи информации о запросах, исключениях и других событиях в приложении зачастую помогает в обнаружении проблем. Мониторинг производительности и доступности сервера также является важным аспектом.
	Тестирование API: Проведение тестирования API, включая проверку входных и выходных данных, обработку ошибок и общую функциональность API.
	Отладка запросов и ответов: Использование инструментов для отладки сетевого трафика, таких как Postman или curl, для анализа входящих и исходящих запросов по API.
	Изучение исходного кода: Анализ кода серверной части приложения для выявления потенциальных уязвимостей, плохо оптимизированного кода и других проблем.
	Использование инструментов мониторинга производительности: Инструменты, которые позволяют отслеживать производительность приложения, такие как New Relic, Prometheus или DataDog, могут помочь в выявлении проблем с производительностью сервера.
	Тестирование отказоустойчивости: Имитация отказов в работе сервера, таких как отключение базы данных или сетевого оборудования, для проверки того, насколько система устойчива к неполадкам.
	Регрессионное тестирование: Проверка того, что изменения в коде не вызывают побочных эффектов и не ломают существующий функционал.
	Проверка конфигураций и зависимостей: Проверка корректности настроек сервера, библиотек и других зависимостей.
	Эти методы помогают локализовать и устранять дефекты в серверной части, что способствует созданию более стабильного и надежного программного обеспечения.
