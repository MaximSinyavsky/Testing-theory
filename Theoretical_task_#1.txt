Задание 1

1.	Что такое тестирование программного обеспечения?
— процесс анализа программного средства и сопутствующей документации с целью выявления
дефектов и повышения качества продукта;
2.	Что такое качество программного обеспечения?
	Качество программного обеспечения:
— способность программного продукта при заданных условиях удовлетворять установленным или предполагаемым потребностям;
— степень, в которой система, компонент или процесс удовлетворяют потребностям или ожиданиям заказчика или пользователя.
3.	Когда начинать и заканчивать тестирование?
	Начинать тестирование — как только это возможно! Более детально:
— когда тестирование ПО проводится на ранней стадии, вы можете с легкостью повлиять на дизайн, так как его изменение на этой стадии не столь дорогостоящее чем на более поздних стадиях;
— в свою очередь, чем раньше обнаруживается ошибка, тем дешевле она стоит компании;
— также тестирование может начинаться до фактического получения ПО (статическое тестирование), что действительно немаловажно, так как снижает сложность провождения динамической стадии тестирования. Бытует мнение, что многие ошибки, которые найдены в стадии динамического тестирования, могли и должны были зафиксированные в стадии статического тестирования;
— тестирование на ранних стадиях (изучение требований, спецификаций, бизнес случаев и т.д.) обеспечит тестировщику больше знаний о ПО, поможет обнаружить логические и технические ошибки, которые бы влияли на ПО, его конечный дизайн и стоимость;
— но необходимо выполнить критерий входа  — это набор общих и специфичных условий для продолжения процесса с определенной задачей, например, фаза тестирования. Цель критериев входа — предотвращение начала задачи, которое может потребовать больше (бесполезных) усилий, чем на устранение не пройденных критериев входа. Проще говоря, критерии входа следует понимать как основные условия, которые должны быть выполнены до того, как Вы и Ваша команда могут начать тестирование.
	Заканчивать тестирование необходимо:
— Эвристика «Время вышло!»;
	Для многих специалистов по тестированию это наиболее распространенная эвристика: мы останавливаем тестирование, когда заканчивается выделенное на него время.
— Эвристика пиньяты;
	Мы прекращаем ломать программу, когда начинают выпадать конфеты – мы останавливаем тестирование, когда видим первую достаточно серьезную проблему.
— Эвристика «мертвой лошади»;
	В программе слишком много ошибок, так что продолжение тестирования не имеет смысла. Мы знаем, что все изменится настолько, что сведет на нет результаты текущего тестирования.
— Эвристика «Задание выполнено»;
Мы останавливаем тестирование, когда найдены ответы на все поставленные вопросы
— Эвристика «Отмена задания»;
 	Наш клиент сказал нам: «пожалуйста, прекратите тестирование». Это может произойти по причине перерасхода бюджета, или вследствие отмены проекта, и по любой другой причине.
— Эвристика «Я зашел в тупик!»;
 	По какой бы то ни было причине мы останавливаемся, поскольку обнаруживаем некое препятствие. У нас нет информации, которая нам требуется (например, многие люди заявляют, что не могут тестировать без достаточного количества спецификаций). Имеется блокирующая ошибка, и таким образом мы не можем перейти в ту область продукта, которую необходимо протестировать, у нас нет необходимого оборудования или инструментария, у команды нет квалификации, требуемой для выполнения некоторых специальных тестов.
— Эвристика «освежающей паузы»;
 	Вместо прекращения тестирования мы приостанавливаем его на некоторое время. Мы можем остановить тестирование и сделать перерыв, когда мы устали, когда нам стало скучно или пропало вдохновение. Мы можем сделать паузу на то, чтобы выполнить некоторые исследования, разработать планы, поразмыслить над тем, что мы делали в прошлом и понять, что делать дальше. Идея заключается в том, что нам требуется определенный перерыв, после которого мы сможем вернуться к продукту со свежим взглядом или свежими мыслями.
— Эвристика «Отсутствие продвижения»;
	Что бы мы ни делали, мы получаем тот же самый результат. Это может происходить в случае, когда программа падает определенным способом или перестает отвечать, но также мы можем не продвигаться, когда программа в основном ведет себя стабильно: "выглядит хорошо!"
— Эвристика Привычного завершения;
	Мы останавливаем тестирование тогда, когда мы обычно останавливаем тестирование. Имеется протокол, задающий определенное количество идей для тестирования, или тест-кейсов, или циклов тестирования, или как вариант – имеется определенный объем работ по тестированию, который мы выполняем и после этого останавливаемся. Agile-команды, например, часто применяют такой подход: «когда выполнены все приемочные тесты, мы знаем, что продукт готов к поставке».
— Больше нет интересных вопросов;
 	В этот момент мы решаем, что не осталось вопросов, ответы на которые были бы достаточно ценными, чтобы оправдать стоимость продолжения тестирования, и поэтому мы останавливаемся. Эта эвристика используется в основном как дополнение к другим эвристикам, помогая принять решение о том, есть ли какие-то вопросы или риски, которые отменяют действие этих эвристик (примеры таких вопросов я привожу после каждой эвристики). Кроме того, если одна эвристика советует нам прекратить тестирование, следует проверить, нет ли интересных вопросов или серьезных рисков в других областях, и если они есть, то мы скорее продолжим тестирование, чем остановимся.
— Эвристика уклонения/безразличия.
	Иногда людей не интересует дополнительная информация, либо они не хотят знать, что происходит в программе. Тестируемое приложение может быть первой версией, которую, как мы знаем, скоро заменят. Некоторые люди прекращают тестирование по причине лени, злого умысла или отсутствия мотивации. Иногда бизнес-критичность выпуска нового релиза настолько высока, что никакая мыслимая проблема не остановит выход программы, и поэтому никакие новые результаты тестирования не будут иметь значения.
4.	Какие знаете цели тестирования программного обеспечения?
– Предотвращение появления дефектов;
– Повышение качества ПО;
– Предоставление информации о качестве ПО конечному заказчику.
5.	Quality Assurance- это?
— активности, направленные на обеспечение уверенности в том, что требования к качеству будут выполнены.
6.	Quality Control - это?
— набор действий, предназначенных для оценивания качества компонента или системы.
7.	Тестирование - это?
— процесс в рамках жизненного цикла разработки программного обеспечения, который оценивает качество компонента или системы, а также связанных с ними рабочих продуктов;
— проверка соответствия между реальным и ожидаемым поведением программы.
8.	Какие знаете принципы тестирования?
— Тестирование демонстрирует наличие дефектов (Testing shows presence of defects);
— Исчерпывающее тестирование недостижимо (невозможно) (Exhaustive testing is not possible);
— Раннее тестирование (Early testing);
— Скопление/кластеризация дефектов (Defect clustering);
— Парадокс (эффект) пестицида (Pesticide paradox);
— Тестирование зависит от контекста (Testing is context dependent);
— Заблуждение об отсутствии ошибок (Absence of errors fallacy).
9.	Что такое верификация?
	Верификация (Стетический механизм): 
– доказанное объективными результатами исследования подтверждение того, что определенные требования были выполнены;
— это процесс оценки системы, чтобы понять, удовлетворяют ли результаты текущего этапа разработки условиям, которые были сформулированы в его начале.
10.	Что такое валидация?
	Валидация (Динамический мехнизм): 
— доказанное объективными результатами исследования подтверждение того, что требования для конкретного определенного использования приложения были выполнены;
— это процесс оценки конечного продукта, необходимо проверить, соответствует ли программное обеспечение ожиданиям и потребностям заказчика и пользователя, его требованиям к системе.
11.	Перечислите характеристики качества программного обеспечения и их атрибуты.
	Функциональность:
— Корректность (Correctness): Этот атрибут означает, насколько правильно программа выполняет заданные функции. Например, если программе поручено сортировать данные, корректность подразумевает, что она сортирует их правильно.
— Целостность (Integrity): Целостность связана с защитой данных и функций программы от несанкционированных изменений. Если данные могут быть изменены только авторизованными пользователями, то это означает, что программа обладает высокой целостностью.
Интероперабельность (Interoperability): Этот атрибут оценивает способность программы взаимодействовать с другими системами и программами. Например, интероперабельность может быть важна, если программа должна обмениваться данными с другими приложениями.
— Полнота (Completeness): Полнота означает способность программы предоставлять все функции, заявленные в требованиях. Это означает, что программа не должна иметь недостающих функций.
	Надежность:
— Доступность (Availability): Этот атрибут измеряет время, в течение которого система доступна для использования. Надежная система должна иметь высокую доступность, чтобы минимизировать простои.
— Устойчивость (Fault Tolerance): Устойчивость оценивает способность программы работать надежно, даже если возникают сбои или ошибки. Надежные программы могут продолжать функционировать, даже если произошел сбой.
— Устойчивость (Resilience): Этот атрибут связан с способностью программы восстанавливаться после сбоев и неполадок. Восстановление может включать в себя восстановление данных или переключение на резервные ресурсы.
Предсказуемость (Predictability): Надежная система должна предсказуемо вести себя в различных ситуациях, что важно для пользователей и операторов системы.
	Эффективность:
— Эффективность использования ресурсов (Resource Utilization): Этот атрибут оценивает, насколько эффективно программа использует ресурсы, такие как память, процессорное время и сетевая пропускная способность. Высокая эффективность обеспечивает оптимальное использование ресурсов.
— Время отклика (Response Time): Время отклика измеряет, сколько времени требуется программе для реагирования на запросы пользователя. Снижение времени отклика повышает удовлетворенность пользователей.
— Пропускная способность (Throughput): Пропускная способность определяет, сколько операций программа может обработать за единицу времени. Высокая пропускная способность важна для приложений с большой нагрузкой.
	Безопасность:
— Конфиденциальность (Confidentiality): Этот атрибут оценивает способность программы защищать конфиденциальные данные от несанкционированного доступа. Высокая конфиденциальность важна для систем, которые обрабатывают чувствительные данные.
— Целостность (Integrity): Способность программы обеспечивать целостность данных и защищать их от несанкционированных изменений. Например, если данные не должны быть подвергнуты изменениям без авторизации, целостность играет важную роль.
— Доступность (Availability): Этот атрибут определяет способность программы оставаться доступной даже при атаках или сбоях. Надежные системы должны быть доступными для пользователей даже в условиях неполадок.
	Удобство использования:
— Понимаемость (Understandability): Понимаемость оценивает, насколько легко пользователи могут понять, как использовать программу. Простой и понятный интерфейс повышает удобство использования.
— Простота обучения (Learnability): Этот атрибут связан с легкостью освоения программы новыми пользователями. Чем быстрее пользователи могут освоить программу, тем лучше.
Ориентация на пользователя (User-Centered Design): Удовлетворение потребностей и ожиданий пользователей является ключевой составляющей удобства использования.
	Поддерживаемость и сопровождаемость:
— Модульность (Modularity): Модульность оценивает способность программы быть разбитой на отдельные модули, что облегчает сопровождение и поддержку. Модульные системы позволяют быстрее вносить изменения и устранять ошибки.
— Изменяемость (Changeability): Изменяемость определяет, насколько легко программа может подвергаться изменениям без существенных нарушений работы. Поддерживаемость связана с управлением изменениями в программе.
— Документация (Documentation): Наличие подробной и актуальной документации для пользователей и разработчиков оказывает значительное влияние на поддерживаемость и сопровождаемость программы.
	Совместимость:
— Совместимость с платформами (Platform Compatibility): Этот атрибут оценивает способность программы работать на различных операционных системах и аппаратных платформах. Совместимость важна для программ, предназначенных для разных сред.
— Совместимость с браузерами (Browser Compatibility): Совместимость с разными веб-браузерами важна для веб-приложений, чтобы они корректно отображались и функционировали в разных браузерах.
— Совместимость с операционными системами (Operating System Compatibility): Этот атрибут оценивает способность программы работать на разных версиях операционных систем, что важно для пользователей с разными ОС.