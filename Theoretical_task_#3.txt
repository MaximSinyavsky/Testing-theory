Задание 3


1.	Что такое функциональное тестирование (FunctionalBehavioral testing)
	Функциональное тестирование - это тип тестирования программного обеспечения, направленный на проверку того, как система выполняет свои функции. Оно сосредоточено на том, что система должна делать, и на том, как она реагирует на определенные входные данные. Основная цель функционального тестирования - удостовериться, что программное обеспечение соответствует функциональным требованиям, спецификациям и ожиданиям пользователей.
	Процесс функционального тестирования включает в себя создание тестовых случаев на основе функциональных спецификаций, проведение тестов для проверки правильности реакций системы на конкретные входные данные, а также сопоставление реальных результатов с ожидаемыми. Кроме того, функциональное тестирование может включать проверку пользовательского интерфейса, работы с базой данных, обработки транзакций, и других ключевых функций системы.
	В итоге, функциональное тестирование помогает обнаруживать дефекты в функциональности программного обеспечения, а также удостовериться в том, что продукт соответствует предъявляемым к нему требованиям.

2.	Что такое нефункциональное тестирование (Non-Functional testing)
	Нефункциональное тестирование - это тип тестирования, направленный на проверку аспектов программного обеспечения, не связанных непосредственно с его функциональностью. Этот вид тестирования оценивает характеристики системы, которые не связаны с конкретными функциями продукта, такие как производительность, масштабируемость, безопасность, надежность, совместимость, удобство использования и другие атрибуты.

3.	Какие виды тестирования относятся к функциональному тестированию
	Функциональное тестирование включает в себя несколько видов тестирования, ориентированных на проверку различных аспектов функциональности программного обеспечения:
	Модульное тестирование (Unit Testing): Это вид тестирования, при котором отдельные модули или компоненты программного обеспечения проверяются на корректность работы. Это обычно делается на самом раннем этапе разработки.
	Интеграционное тестирование (Integration Testing): Оно направлено на проверку взаимодействия между различными модулями программного обеспечения. Цель - убедиться, что они работают вместе как задумано.
	Системное тестирование (System Testing): Во время этого тестирования проверяется весь функционал, чтобы удостовериться, что взаимодействие между компонентами системы и ее функциональность работают согласно требованиям.
	Приемочное тестирование (Acceptance Testing): Это тестирование проводится для убеждения в том, что система соответствует требованиям заказчика и готова к принятию.
	Smoke Testing / Sanity Testing: Этот вид тестирования выполняется для проверки базовой функциональности системы перед более детальными тестами или после внесения небольших изменений.
	Регрессионное тестирование (Regression Testing): В ходе регрессионного тестирования проверяется, что новые изменения в системе не привели к появлению новых ошибок в уже существующем функционале.
	Эти виды тестирования являются основными составляющими функционального тестирования, и каждый из них имеет свои специфические задачи и цели.

4.	Какие виды тестирования относятся к нефункциональному тестированию
	В рамках нефункционального тестирования существует несколько основных видов тестирования, ориентированных на оценку атрибутов качества программного обеспечения, отличных от его функциональности. К ним относятся:
	Тестирование производительности (Performance Testing): Этот вид тестирования направлен на оценку характеристик производительности системы, таких как скорость, масштабируемость, использование ресурсов и пропускная способность.
	Тестирование нагрузки (Load Testing): Проверка поведения системы при увеличении нагрузки до предела ее рабочих возможностей.
	Тестирование стрессоустойчивости (Stress Testing): Оценка стабильности системы при экстремальных нагрузках, превышающих предельные возможности.
	Тестирование безопасности (Security Testing): Проверка системы на уязвимости и защищенность от различных видов атак и несанкционированного доступа.
	Тестирование совместимости (Compatibility Testing): Оценка работы системы на различных платформах, браузерах, устройствах или с другим программным обеспечением.
	Тестирование надежности (Reliability Testing): Этот вид тестирования направлен на определение надежности системы и ее способности сохранять работоспособность в течение длительного времени.
	Тестирование удобства использования (Usability Testing): Оценка удобства использования интерфейса и пользовательского опыта.
	Тестирование доступности (Accessibility Testing): Проверка соответствия системы стандартам доступности для пользователей с ограниченными возможностями.
	Каждый из этих видов тестирования нефункционального типа проводится с целью оценки определенных аспектов качества программного обеспечения, которые не связаны непосредственно с его функциональностью, но имеют критическое значение для общей оценки работы системы.

5.	Что такое СтатическоеДинамическое тестирование
		Статическое тестирование программ является формой тестирования, которая проводится без фактического выполнения программы. Оно включает в себя анализ и проверку исходного кода, документации или других артефактов без его выполнения. Это включает в себя такие виды тестирования, как:
	Статический анализ кода (Static Code Analysis): Это процесс анализа программного кода без его запуска, с целью выявления потенциальных проблем, таких как ошибки, несоответствия стандартам кодирования, утечки памяти и другие проблемы.
	Обзор кода (Code Review): Проведение обзора кода членами команды разработки с целью обнаружения ошибок, повышения качества и внедрения лучших практик.
	Анализ документации: Проверка документации программного обеспечения на наличие ошибок, несоответствий и пропусков.
		Динамическое тестирование:
	Динамическое тестирование, напротив, представляет собой форму тестирования, которая выполняется путем запуска программы с тестовыми данными с целью оценки ее поведения и результатов выполнения. Оно включает такие виды тестирования, как:
	Модульное тестирование (Unit Testing): Тестирование отдельных модулей (например, функций или методов) программы.
	Интеграционное тестирование (Integration Testing): Проверка взаимодействия между различными модулями программы.
	Системное тестирование (System Testing): Тестирование всей системы в целом с целью проверки ее соответствия заявленным требованиям.
	Приемочное тестирование (Acceptance Testing): Проверка того, соответствует ли программное обеспечение требованиям конечного пользователя.
	**Нагрузочное тестирование (Load Testing) и другие виды динамического тестирования, которые оценивают поведение системы под нагрузкой.
Использование как статического, так и динамического тестирования помогает обеспечить достаточное покрытие тестирования и повысить качество программного обеспечения.

6.	Что такое ЧерныйСерыйБелый ящик тестирования(WhiteBlackGrey Box testing)
	"Черный ящик", "серый ящик" и "белый ящик" - это термины, используемые в контексте тестирования программного обеспечения для описания стратегий тестирования, когда осуществляется проверка системы или ее частей с различными уровнями доступа к внутренним компонентам, коду и знаниям об их работе.

	Черный ящик (Black Box Testing):
	Это метод тестирования, при котором тестирующий не имеет доступа к внутренней реализации кода или структуре программы.
Тестирование проводится на основе входных данных и ожидаемых результатов.
Цель - проверить работу системы с точки зрения ее функциональности.

	Серый ящик (Gray Box Testing):
	Этот подход к тестированию представляет собой комбинацию черного ящика и белого ящика.
Тестирующий имеет частичное знание о внутренней структуре или реализации программы и использует эту информацию при создании тестов.
Цель - проверить функциональность системы, но также учитывать некоторые аспекты ее внутреннего устройства.

Белый ящик (White Box Testing):
	При этом способе тестирования тестирующий имеет полный доступ к внутренней структуре, коду и логике программы.
Тестирование проводится на основе внутреннего устройства программы.
Цель - проверить корректность внутренней работы программы, например, проверить правильность работы алгоритмов, циклов, условий и т. д.

7.	Что такое Компонентное(Component or Unit Testing) Интеграционное (Integration Testing)
	Компонентное тестирование (Component or Unit Testing):
	Это вид тестирования программного обеспечения, при котором отдельные компоненты или элементы программы, такие как функции, методы или классы, тестируются отдельно от целой системы. Целью компонентного тестирования является проверка правильности работы каждого отдельного компонента программы. В этот вид тестирования включается проверка всех возможных путей выполнения кода, а также всех вариантов входных данных, чтобы убедиться, что компонент ведет себя в соответствии с его спецификацией.

	Интеграционное тестирование (Integration Testing):
	Интеграционное тестирование проводится для проверки взаимодействия между отдельными компонентами программы, объединенными в более крупные модули или системы. Целью интеграционного тестирования является обнаружение ошибок взаимодействия между компонентами, которые могут проявиться только при их совместной работе. Эти ошибки могут включать проблемы передачи данных между различными компонентами, конфликты при обращении к общим ресурсам, или неправильное использование интерфейсов между компонентами.
	Интеграционное тестирование может осуществляться на различных уровнях интеграции, таких как интеграция классов, интеграция модулей, интеграция сервисов, и т.д. Все это помогает обнаруживать проблемы взаимодействия между компонентами, которые могут быть невидимы на этапе компонентного тестирования.

8.	Системное (System Testing)Приемочное тестирования (Acceptance Testing)
	Системное тестирование (System Testing):
	Это вид тестирования программного обеспечения, который выполняется на законченной и настроенной системе с целью проверить, удовлетворяют ли ее функции бизнес-требованиям, и оценить ее работоспособность по отношению к заявленным спецификациям. Это тестирование выполняется после завершения тестирования модулей и интеграционного тестирования.

	Приемочное тестирование (Acceptance Testing):
	Это вид тестирования приложения, проводимый для проверки того, соответствует ли разработанное приложение требованиям и ожиданиям заказчика. Этот вид тестирования выполняется перед тем, как приложение будет представлено конечным пользователям. В основном приемочное тестирование проводится заказчиком или командой, представляющей интересы заказчика.

9.	Что такое ПозитивноеНегативное тестирование
	Позитивное тестирование (Positive Testing): Это тип тестирования, при котором проверяется соответствие системы или компонентов её функциональным требованиям. Такое тестирование демонстрирует, что продукт работает так, как задумано, выполняя ожидаемые функции.
	Негативное тестирование (Negative Testing): Этот вид тестирования направлен на проверку поведения системы при неправильных или нестандартных условиях. Например, это может включать в себя ввод неправильных данных или попытки выполнения операций в неподходящем порядке. Целью является обнаружение уязвимостей, ошибок или непредвиденных реакций системы.
	В общем, обе эти концепции тесно связаны с процессом тестирования программного обеспечения, где позитивное тестирование помогает удостовериться в правильной работе системы в нормальных условиях, в то время как негативное тестирование помогает выявить и устранить слабые места в поведении системы при нештатных ситуациях.

10.	Что такое Альфа (Alpha Testing)Бета тестирование(Beta Testing)
	"Альфа-тестирование" и "бета-тестирование" представляют собой два этапа тестирования программного обеспечения:
	Альфа-тестирование (Alpha Testing): Это форма внутреннего тестирования, которое проводится в организации разработчика программного обеспечения. Обычно альфа-тестирование проводится командой внутренних тестировщиков или сотрудников компании, не связанных непосредственно с разработкой продукта. Целью альфа-тестирования является проверка работоспособности программного обеспечения в контролируемой среде до его передачи на более широкий круг испытаний.
	Бета-тестирование (Beta Testing): Этот вид тестирования проводится внешними пользователями или клиентами после завершения альфа-тестирования. Программное обеспечение, находящееся на этапе бета-тестирования, обычно предоставляется ограниченной группе пользователей для использования в реальной среде. Целью бета-тестирования является сбор обратной связи от реальных пользователей, выявление ошибок, а также оценка общей работы и удовлетворенности пользователями продуктом.
	Таким образом, альфа- и бета-тестирование представляют собой важные этапы в жизненном цикле разработки программного обеспечения, обеспечивающие качество продукта перед его выпуском на рынок.

11.	Что такое ИнтуитивноеИсследовательское тестирование
	Ad-hoc тестирование - представляет собой тестирование без использования каких-либо спецификаций, 
планов и разработанных тест-кейсов. Это ваша чистая импровизация, т.е., например, вы в первый раз получили 
приложение и на каком-то своем эмпирическом, на традиционном уровне, понимаете, как с ним нужно работать. 
	Исследовательское тестирование, в отличие от ad-hoc, более формальная версия тестирование. Она 
не требует написания тест-кейсов, но в то же время подразумевает, что каждый последующий тест выбирается 
на основании результатов предыдущего теста. Даже если вы знаете, как работает ваше приложение, т.е. вы его 
не в первый раз видите, то вы можете также следовать какому-то плану. Не обязательно его документировать. 
Т.е. вы знаете, что в таком-то модуле есть такой-то ожидаемый результат и вы это тестируете, но не оформляете 
это посредством тестовой документации. 

12.	Что такое Gorilla testing Monkey testing
	"Gorilla testing" и "Monkey testing" оба относятся к методам тестирования программного обеспечения, которые обычно используются для проверки надежности системы. В обоих случаях тестирующие систему поведения, которое может быть сравнимо с действиями гориллы или обезьяны, отсюда и происходят названия. Давайте рассмотрим каждый метод отдельно:
	Gorilla Testing: "Тестирование гориллы" (Gorilla Testing) в контексте программного обеспечения обычно означает проведение интенсивных и экстремальных тестов на определенные компоненты системы или на всю систему в целом. Это может включать в себя тестирование на предельных нагрузках, длительное пребывание системы в состоянии максимальной нагрузки или другие виды экстремальных тестов, чтобы убедиться в надежности системы в условиях повышенной нагрузки или стресса.
	Monkey Testing: "Тестирование обезьяной" (Monkey Testing) представляет собой метод тестирования, при котором система подвергается случайным, непредсказуемым воздействиям с целью проверки ее надежности. Это может включать в себя случайные вводы данных, клики по интерфейсу, случайные жесты на мобильных устройствах и другие типы случайных действий с целью обнаружения ошибок или непредвиденного поведения системы.
	Оба метода направлены на проверку стабильности и надежности системы в условиях нештатного функционирования или нагрузки. Они часто используются в сочетании с другими методами тестирования для максимального охвата возможных сценариев использования и обеспечения высокого уровня качества программного обеспечения.

13.	Что такое Дымовые (Smoke) Ре-тест (Re-test) Санити (Sanity)Регрессионное (Regression) тестирование
	Дымовое тестирование (Smoke Testing): Это первоначальное тестирование, которое выполняется для проверки основных и наиболее важных функций программного обеспечения с целью удостоверения того, что основные функции работают корректно перед тем, как приступать к более детальному тестированию.
	Регрессионное тестирование (Regression Testing): Это вид тестирования, который выполняется для проверки программного обеспечения с целью обнаружения ошибок, возникших в результате новых изменений или добавления нового кода. Это помогает удостовериться, что новые изменения не повлияли на уже существующий функционал.
	Ре-тест (Re-testing): Ре-тестирование фокусируется на повторном выполнении тест-кейсов, которые в первоначальном цикле тестирования привели к ошибкам. Целью является удостовериться, что эти ошибки были исправлены.
	Санити тестирование (Sanity Testing): Это быстрое ручное или автоматизированное тестирование для удостоверения того, что небольшие изменения в коде не повлияли на функциональность программы. Основная цель санити-тестирования - это выявить неполадки в функционировании программы, вызванные небольшими изменениями, прежде чем приступать к более глубокому тестированию.

14.	Что такое Тестирование нового функционала Приемочное тестирование
	Тестирование нового функционала: При разработке программного обеспечения постоянно добавляется новый функционал или вносятся изменения в существующий. Тестирование нового функционала - это процесс проверки и обеспечения корректности работы только что добавленных возможностей или изменений в программном продукте. Это включает в себя проведение тест-кейсов или других методов тестирования, направленных на демонстрацию корректного функционирования новых компонентов или возможностей, а также на выявление и исправление ошибок, которые могли появиться в результате внесенных изменений.
	Приемочное тестирование:	Приемочное тестирование, иногда называемое пользовательским тестированием, представляет собой финальную стадию тестирования, проводимую перед выпуском программного продукта. Оно выполняется с целью удостоверения, что программное обеспечение соответствует ожиданиям заказчика или конечного пользователя. Приемочное тестирование обычно выполняется заказчиком или контрольной группой пользователей продукта. Они проверяют, удовлетворяет ли продукт их требованиям, и могут утвердить его для выпуска.

15.	Что такое РучноеАвтоматизированноеПолуавтоматизированное тестирование
	Ручное тестирование: Ручное тестирование подразумевает выполнение тестовых сценариев, проверку функциональности и поиск дефектов в программном обеспечении с помощью реальных пользователей или тестировщиков. Это означает, что человек вручную выполняет определенные шаги тест-кейса, взаимодействуя с программой, чтобы проверить ее функциональность, использовать различные сценарии и отслеживать результаты тестирования. Ручное тестирование требует больше времени и усилий при повторении одних и тех же тестовых сценариев, но оно может быть полезным там, где автоматизация сложна или невозможна.
	Автоматизированное тестирование: Автоматизированное тестирование подразумевает использование специальных программных средств и скриптов для выполнения тестовых сценариев. Это позволяет автоматизировать процесс тестирования, ускорить его и повысить его точность. Автоматизация подходит для повторяющихся тестов, регрессионного тестирования, проверки больших объемов данных и тестирования производительности.
	Полуавтоматизированное тестирование: Полуавтоматизированное тестирование означает использование как ручных, так и автоматизированных методов тестирования. Обычно это касается ситуаций, когда часть тестирования может быть автоматизирована (например, тесты интерфейса или регрессионное тестирование), а другая часть требует ручного вмешательства (например, проверка пользовательского опыта или интерфейса).

16.	На основании чего происходит разработка тестовых сценариев
	Разработка тестовых сценариев происходит на основании нескольких ключевых факторов и этапов разработки программного обеспечения:
	Требования к программному обеспечению: Первоочередной источник тестовых сценариев - это требования к программному обеспечению. Они могут быть представлены в виде спецификаций, пользовательских историй, функциональных требований и других документов. Эти требования определяют ожидаемое поведение системы и функционал, который должен быть протестирован.
	Дизайн системы и архитектурные решения: Тестовые сценарии также могут быть разработаны на основе дизайна системы и ее архитектурных решений. Это помогает сфокусироваться на ключевых компонентах, интерфейсах и важных путях взаимодействия.
	Опыт и знания команды тестирования: Команда тестирования может использовать свой опыт и знания для разработки эффективных и полезных тестовых сценариев. Это может включать в себя знание типичных проблем, которые возникают в похожих системах или предыдущих проектах.
	Взаимодействие с заказчиком или представителями бизнеса: Понимание потребностей заказчика или пользователей является ключевым фактором при разработке тестовых сценариев. Обратная связь от заказчика может помочь выделить приоритеты тестирования и сфокусироваться на ключевых функциях.
	Анализ рисков: Разработка тестовых сценариев также может быть направлена на минимизацию рисков, связанных с ключевыми функциями программного обеспечения. Тестовые сценарии могут быть разработаны для проверки уязвимых пунктов или потенциальных проблем.
	Эти факторы обычно объединяются для создания комплексных тестовых сценариев, которые позволяют полноценно исследовать систему на предмет соответствия требованиям, стабильности и производительности.

17.	Что такое Frontend  Backend
	Frontend и Backend - это две ключевые составляющие веб-разработки, и они отвечают за различные аспекты веб-приложения или сайта.
	Frontend отвечает за то, что пользователь видит и с чем взаимодействует, когда посещает веб-сайт или использует веб-приложение. Он включает в себя интерфейс, с которым пользователь непосредственно взаимодействует, такой как внешний вид, расположение элементов, анимации, и, конечно же, контент. HTML, CSS и JavaScript являются основными технологиями для создания Frontend-а. HTML определяет структуру страницы, CSS отвечает за ее визуальное оформление, а JavaScript - за интерактивность и динамическое поведение элементов на странице. Они работают в браузере пользователя и отображают информацию.
	Backend - это то, что происходит за кулисами. Это серверная сторона веб-приложения, которая обрабатывает данные, взаимодействует с базой данных, обеспечивает бизнес-логику, обрабатывает запросы от Frontend и отправляет им обратно необходимые данные. Технические стеки разработки для бэкенда могут варьироваться, но обычно они включают в себя языки программирования (например, Node.js, Python, Ruby, Java), базы данных (например, PostgreSQL, MongoDB, MySQL) и серверное программное обеспечение, которое управляет запросами.
	Фронтенд и бэкенд взаимодействуют друг с другом через сеть (например, Интернет), обмениваясь данными и запросами, чтобы предложить пользователям отзывчивый и полноценный пользовательский опыт.

18.	Что такое тестирование безопасности
	Тестирование безопасности, также известное как тестирование на проникновение (penetration testing) или этичное взломщичество (ethical hacking), является процессом проверки информационной системы, приложения или сети на наличие уязвимостей, которые могут быть использованы злоумышленниками для несанкционированного доступа, повреждения данных или прерывания работы системы.
	Цель тестирования безопасности заключается в обнаружении и устранении потенциальных уязвимостей в системе до того, как они могут быть злоупотреблены. Тестирование безопасности может включать различные методы, такие как сканирование уязвимостей, анализ кода, атаки "черного ящика" и "белого ящика", социальная инженерия и другие техники, которые имитируют действия реальных злоумышленников.
	Процесс тестирования безопасности обычно включает в себя следующие шаги:
	Сбор информации: Оценка информации о целевой системе, такой как IP-адреса, домены, конфигурация сети и другая публично доступная информация.
	Анализ уязвимостей: Использование различных инструментов и техник для обнаружения уязвимостей в системе, включая сканирование на предмет известных уязвимостей.
	Эксплойтация уязвимостей: Попытка использовать обнаруженные уязвимости для получения несанкционированного доступа к системе.
	Отчетность: Подготовка отчета, содержащего обнаруженные уязвимости и рекомендации по их устранению.
	Тестирование безопасности играет важную роль в обеспечении защиты информационных систем от кибератак и обеспечивает повышенный уровень безопасности для всей системы.

19.	Перечислите Принципы безопасности программного обеспечения

## Конфиденциальность означает, что конфиденциальная информация должна быть защищена от несанкционированного доступа. Этот принцип обеспечивает защиту личных данных, коммерческой информации, государственных секретов и других конфиденциальных данных от несанкционированного доступа.

## Целостность означает, что данные должны быть защищены от изменения несанкционированными лицами. Этот принцип гарантирует, что информация, которая передается и хранится, не будет изменена, повреждена или уничтожена.

## Доступность означает, что информация должна быть доступна только тем, кто имеет на это право. Этот принцип гарантирует, что информация доступна и используется только теми, кто имеет право на ее использование, и что она не будет заблокирована или недоступна из-за непредвиденных событий или действий злоумышленников.

## Аутентификация и авторизация пользователей — это процессы, которые используются для определения легитимности пользователей и предоставления им прав доступа к системе.

## Шифрование данных — это процесс преобразования данных в неразборчивый вид, чтобы они не могли быть прочитаны или использованы злоумышленниками.

20.	Перечислите виды уязвимостей в безопасности программного обеспечения
	Различные виды уязвимостей в безопасности программного обеспечения могут быть классифицированы следующим образом:
	Уязвимости ввода данных:
 — SQL-инъекции
 — Хранимые XSS (межсайтовый скриптинг)
 — Командные инъекции
 — LDAP-инъекции
	Уязвимости аутентификации и авторизации:
 — Слабые пароли
 — Недостаточная проверка подлинности
 — Недостаточный контроль доступа
 — Утечка учетных данных
	Уязвимости управления сеансами:
 — Кража сеансов
 — Фиксация сеансов
 — Обход аутентификации
 — Недостаточное время действия сеансов
	Уязвимости безопасности хранения данных:
 — Отсутствие шифрования данных в покое
 — Утечка конфиденциальных данных
 — Уязвимости в базах данных
	Уязвимости безопасности веб-приложений:
 — Кросс-сайтовый скриптинг (XSS)
 — Межсайтовая подделка запроса (CSRF)
 — Отказ в обслуживании (DoS)
 — Уязвимости встроенных сценариев
	Уязвимости управления конфигурацией:
 — Использование слабых настроек по умолчанию
 — Недостаточное обновление и управление конфигурациями
	Уязвимости исполнения:
 — Переполнение буфера
 — Несанкционированное выполнение кода
 — Злоупотребление привилегиями
	Уязвимости взаимодействия с другими системами:
 — Небезопасные API
 — Недостаточное управление зависимостями
 — Недостаточное управление взаимодействием с внешними ресурсами
 — Уязвимости могут проявляться в различных формах и в различных частях программного обеспечения. Поиск,  — исправление и предотвращение таких уязвимостей является критической составляющей для обеспечения  — безопасности информационных систем.

21.	Что такое Тестирование на отказ и восстановления Failover and Recovery Testing
	Тестирование на отказ и восстановление (Failover and Recovery Testing) - это процесс тестирования системы или приложения с целью определения того, насколько хорошо система восстанавливается после отказа (какого-либо сбоя или отказа в работе).
	Тестирование на отказ и восстановление (Failover Testing) включает в себя создание ситуаций, при которых часть инфраструктуры или ключевые компоненты системы намеренно выходят из строя, чтобы проверить, как система реагирует на такие события. Это может включать в себя отключение серверов, сбои сетевых устройств, потерю подключения к базе данных и так далее.
	Цель тестирования на отказ и восстановление - убедиться, что система продолжает работать в условиях отказа и восстанавливается после возникновения проблем.
	Этот процесс важен для обеспечения непрерывности бизнес-процессов, особенно в случае критически важных систем, где даже небольшой период недоступности может привести к серьезным последствиям.
	Тестирование на отказ и восстановление часто проводится в сочетании с другими видами тестирования, такими как тестирование производительности, тестирование масштабируемости и тестирование восстановления после аварии для обеспечения полной готовности системы к возможным сбоям.

22.	Что такое тестирование Эффективности использования ресурсов
	Тестирование эффективности использования ресурсов (Resource Utilization Testing) относится к процессу оценки того, как система использует доступные ей ресурсы во время выполнения. Это включает в себя проверку того, насколько эффективно система использует процессорное время, память, сетевые ресурсы, хранилище и другие ресурсы во время своей работы.
	Целью тестирования эффективности использования ресурсов является выявление узких мест в системе, которые могут привести к неэффективному использованию ресурсов или даже к полной блокировке работы системы. Такой анализ позволяет оптимизировать использование ресурсов системы, обеспечивая более плавную и эффективную работу.
	Примеры включают в себя измерение использования процессора во время выполнения определенных задач, мониторинг потребления памяти при выполнении определенных операций, а также изучение использования сетевых ресурсов или хранилища данных.
	Это важный аспект тестирования, особенно при разработке крупных приложений или при создании систем, работающих на ресурсоемких устройствах, таких как встраиваемые системы или высоконагруженные серверы. Тестирование эффективности использования ресурсов помогает обнаружить проблемы, связанные с утечками ресурсов, неэффективными процессами и другими аспектами, которые могут отрицательно сказаться на производительности и стабильности системы.

23.	Что такое тестирование Масштабируемости (Scalability testing)
	Тестирование масштабируемости (Scalability Testing) представляет собой процесс оценки способности программного обеспечения, системы или приложения эффективно масштабироваться в ответ на увеличение объема нагрузки. Это важная часть тестирования производительности, которая оценивает способность системы сохранять стабильность и производительность при увеличении рабочей нагрузки.
	Основная цель тестирования масштабируемости - определить, насколько система или приложение могут поддерживать большее количество пользователей, объем данных или транзакций, не теряя производительности. При проведении этих тестов проверяется, насколько система может масштабироваться вертикально (путем добавления ресурсов к отдельному узлу) или горизонтально (путем добавления новых узлов или серверов).
	Основные характеристики, которые обычно оцениваются при проведении тестов масштабируемости, включают:
	Производительность: Как изменяется производительность системы при увеличении нагрузки, такой как количество пользователей или объем данных.
	Нагрузочное тестирование: Оценка того, как система справляется с увеличением нагрузки, идентификация точек отказа и определение максимальной нагрузки, которую система может выдержать.
	Горизонтальное и вертикальное масштабирование: Оценка способности системы масштабироваться путем добавления ресурсов (вертикальное масштабирование) или путем расширения по горизонтали (горизонтальное масштабирование).
	Тестирование масштабируемости имеет большое значение для платформ, приложений и систем, которые могут ожидать увеличения нагрузки со временем или планируют масштабироваться для поддержки большего числа пользователей или операций.

24.	Что такое тестирование Производительности (Performance testing)Load testingStress testingVolume testing
	Тестирование производительности (Performance Testing) является одной из важных составляющих общего процесса тестирования программного обеспечения. Оно оценивает, насколько хорошо приложение или система выполняют определенные функции при определенной нагрузке. Вот более подробные объяснения для типов тестирования производительности, которые вы упомянули:
	Load Testing (Тестирование нагрузки): Этот тип тестирования оценивает реакцию системы на увеличение рабочей нагрузки, обычно путем увеличения числа одновременно работающих пользователей или объема обрабатываемых данных. Целью является измерение производительности при различных уровнях загрузки, определение момента, когда система перестает успешно обрабатывать запросы, и выявление возможных узких мест.
	Stress Testing (Тестирование под нагрузкой): Этот вид тестирования предназначен для проверки границ системы, т.е. оценки поведения приложения или системы при экстремальных условиях, когда нагрузка превышает ожидаемый уровень - это может включать как очень высокие значения, так и резкие изменения нагрузки. Цель состоит в выявлении пределов нагрузки, при которых система перестает работать устойчиво или эффективно.
	Volume Testing (Тестирование объема данных): Этот вид тестирования направлен на оценку способности системы обрабатывать большие объемы данных. Целью является выявление эффектов, которые могут возникнуть при увеличении объема данных, таких как утечки памяти, ухудшение производительности и т.д. Важно понять, как система реагирует на рост объема данных, чтобы предотвратить будущие проблемы с производительностью.
	Все эти типы тестирования имеют ключевое значение для обеспечения того, что приложения и системы работают эффективно, надежно и масштабируемо при различных уровнях нагрузки и объемов данных.

25.	Что такое тестирование Надежности(Reliability Testing)
	Тестирование надежности (Reliability Testing) - это процесс оценки стабильности и надежности программного обеспечения в различных условиях. Целью тестирования надежности является определение того, насколько долго приложение может функционировать без сбоев в реальных условиях эксплуатации.
	Основные аспекты тестирования надежности включают в себя:
	Стабильность: Определение способности программного обеспечения работать продолжительное время без сбоев. Это включает в себя проверку наличия утечек памяти, надежность работы при длительной нагрузке и другие аспекты, влияющие на стабильность работы приложения.
	Восстановление после сбоев: Оценка способности программного обеспечения быстро восстановиться после возможных сбоев или отказов. Это может включать в себя проверку процесса восстановления после аварийного завершения работы приложения или после возобновления работы операционной системы.
	Устойчивость к ошибкам: Оценка способности программного обеспечения работать корректно и надежно даже в случае возникновения неожиданных ситуаций, таких как некорректный ввод данных или отключение основных сервисов.
	Долгосрочное тестирование: Проведение тестирования на протяжении длительного времени для проверки стабильности работы приложения в условиях реальной эксплуатации.
	Тестирование надежности играет важную роль при обеспечении высокого уровня качества программного обеспечения, особенно в случаях, когда на него возлагаются значительные ожидания по устойчивости и продолжительности работы.

26.	Что такое тестирование Стабильности (Stability Testing)
	Тестирование стабильности (Stability Testing) - это тип тестирования программного обеспечения, направленный на проверку устойчивости системы при её непрерывной работе в заданных условиях или при нагрузке. Целью такого тестирования является обнаружение проблем, таких как утечки ресурсов, накопление ошибок с течением времени, нестабильное поведение и выход из строя вследствие длительных периодов работы.
	Процесс тестирования стабильности включает в себя следующие аспекты:
	Длительная работа приложения: Тестирование проводится на протяжении длительного времени для проверки, как приложение ведет себя при непрерывной работе. Это позволяет выявить потенциальные проблемы, связанные с деградацией производительности или ресурсов со временем.
	Мониторинг ресурсов: В ходе тестирования системно отслеживается использование ресурсов, таких как память, процессорное время, сетевой трафик и другие параметры, чтобы обнаружить возможные утечки ресурсов или другие проблемы.
	Реакция на экстремальные условия: Программное обеспечение подвергается нагрузке, например, высокой нагрузке на процессор, большому количеству запросов или аномальным условиям, для проверки того, как оно реагирует на такие ситуации.
	Восстановление после сбоев: Включает в себя проверку способности системы восстановиться после сбоев или аварийного завершения работы, а также устойчивость к потере связи с внешними ресурсами.
	Тестирование стабильности помогает определить, насколько надежно и стабильно работает программное обеспечение в условиях реальной эксплуатации, что позволяет выявить и устранить потенциальные проблемы, повысить качество и надежность разрабатываемых систем.

27.	Что такое тестирование Удобства использования(Usability testing)
	Тестирование удобства использования (Usability Testing) - это метод тестирования, целью которого является оценка того, насколько легко пользователи могут использовать определенный продукт, будь то веб-сайт, приложение, устройство или другая система. В процессе тестирования удобства использования акцент делается на опыте пользователя при взаимодействии с продуктом, его понимании функционала, а также на уровне удовлетворенности и эффективности в выполнении задач.
	Процесс тестирования удобства использования включает в себя следующие шаги:
	Определение целей тестирования: Определение ключевых задач и сценариев использования, которые будет оценивать тестирование.
	Разворачивание тестового сценария: Участники тестирования проходят через набор задач, которые представляют типичные сценарии использования продукта.
	Наблюдение и сбор обратной связи: Наблюдатели фиксируют, как пользователи выполняют задачи, а также получают обратную связь от участников тестирования.
	Анализ результатов: Полученная информация используется для оценки того, какие аспекты проекта нуждаются в улучшениях для повышения удобства использования.
	Внесение изменений: На основе результатов тестирования производится анализ и внесение изменений в продукт с целью улучшения его удобства использования.
	Тестирование удобства использования позволяет команде разработчиков и дизайнеров получить обратную связь от реальных пользователей, выявить проблемы, с которыми могут столкнуться пользователи, и внести соответствующие улучшения. Этот процесс способствует созданию продуктов, которые лучше соответствуют потребностям и ожиданиям целевой аудитории.

28.	Что такое тестирование Pixel Perfect Какие инструментами можно пользоваться при тестировании Pixel Perfect
	Тестирование Pixel Perfect - это процесс проверки соответствия макета (дизайна) итоговому пользовательскому интерфейсу с максимальной точностью, чтобы гарантировать, что каждый пиксель, каждое измерение и каждый элемент на экране точно соответствуют заданным в дизайне. Это особенно важно в веб-разработке, разработке мобильных приложений и других сферах, где точное соответствие макету имеет высокое значение.
	Для проведения тестирования Pixel Perfect можно использовать следующие инструменты:
	Графические редакторы: Adobe Photoshop, Sketch, Figma, Adobe XD - эти инструменты используются для создания дизайнов пользовательского интерфейса и часто включают возможность измерения и проверки размеров и отступов элементов.
	Инструменты для замеров и проверки:
	Pixel Ruler: Pixel Ruler - это программное обеспечение, которое позволяет измерять экраны и элементы на них в пикселях.
Модули проверки макета в графических редакторах: Некоторые графические редакторы имеют встроенные инструменты для измерения и проверки соответствия макета.
Инструменты разработчика в браузере (DevTools): Инструменты разработчика позволяют анализировать элементы веб-страницы, измерять отступы, размеры и другие характеристики элементов на экране.
	Сервисы для сравнения макетов: Существуют онлайн-сервисы, которые помогают сравнивать макеты и фактические интерфейсы для обнаружения различий.
	Тестирование на реальных устройствах: Важно также проверять Pixel Perfect на реальных устройствах, так как различные экраны и устройства могут отображать интерфейс по-разному из-за различий в плотности пикселей, размерах экрана и других факторах.
	Тестирование Pixel Perfect помогает обеспечить высокое качество визуального представления пользовательского интерфейса, что важно для создания профессионально выглядящих и функциональных веб-сайтов и приложений.

29.	Что такое тестирование Локализации Совместимости Адаптивности
	Тестирование локализации, совместимости и адаптивности - это специфические типы тестирования, связанные с обеспечением соответствия программного обеспечения, веб-сайтов или мобильных приложений различным языкам, культурам, устройствам и экранам.
	Тестирование локализации:
	Локализация включает адаптацию программного обеспечения к языку, культуре и требованиям конкретного региона.
	Тестирование локализации включает проверку корректного перевода интерфейса, дат, времени, валюты, форматов номеров телефона и адресов для различных регионов, а также адаптацию к особенностям правописания и традиций.
Также проверяется, что локализованный интерфейс не нарушает функциональность программного обеспечения или приложения.
	Тестирование совместимости:
	Этот тип тестирования проверяет, как программа или веб-сайт работают на различных устройствах (например, на компьютерах, планшетах, мобильных телефонах) и в различных окружениях (разные браузеры, операционные системы).
Такое тестирование включает в себя проверку того, что приложение работает корректно на разных устройствах, разрешениях экранов, а также в различных браузерах.
	Тестирование адаптивности:
	Тестирование адаптивности связано с проверкой того, как веб-сайты или приложения реагируют на различные размеры экранов и ориентации (горизонтальную и вертикальную) на мобильных устройствах и планшетах.
Это также включает проверку того, что элементы пользовательского интерфейса адекватно перескакивают и перестраиваются для обеспечения удобства использования на различных устройствах.
Все эти типы тестирования имеют свою важность для обеспечения качества программного обеспечения и удовлетворения потребностей различных пользователей в разных частях мира и на различных устройствах.

30.	Что такое тестирование установки (Installation Testing)
	Тестирование установки (Installation Testing) – это процесс проверки процедуры установки программного обеспечения, включая установку, обновление и удаление программы на целевой системе. Целью этого тестирования является убеждение в том, что процесс установки и удаления программы происходит без проблем и соответствует ожиданиям пользователя.
		Тестирование установки включает в себя следующие аспекты:
	Установка:
	Проверка, успешно ли происходит установка программного обеспечения на целевой системе (компьютере, сервере, мобильном устройстве и т. д.).
Проверка правильности действий инсталлятора (например, создание ярлыков, добавление записей в реестре, размещение файлов в нужных директориях).
	Обновление:
	Проверка процедуры обновления программного обеспечения с предыдущей версии на новую без потери данных или нарушения функциональности.
	Удаление:
	Проверка, успешно ли происходит удаление программы из системы с полным удалением всех созданных при установке файлов и записей в системе.
	Совместимость:
	Проверка совместимости установленного программного обеспечения с другими приложениями на целевой системе.
	Роллбэк:
	Проверка возможности возврата к предыдущей версии программы или к предыдущему состоянию системы в случае проблем при установке или обновлении.
	Тестирование на разных конфигурациях:
	Проверка процесса установки на различных конфигурациях систем и на разных версиях операционных систем.
	Этот вид тестирования обычно проводится вместе с функциональным и совместимостным тестированием для обеспечения того, что установка программного обеспечения происходит корректно и без проблем на различных целевых системах.

31.	Что такое ETL-тестированиеТестирование перед миграцией (Pre-Migration testing)Миграционное тестирование (Migration testing)Тестирование после миграции (Post-Migration testing)
	ETL-тестирование:
	ETL расшифровывается как Extract, Transform, Load, что означает извлечение данных из различных источников, их трансформацию и загрузку в целевую базу данных или хранилище данных. ETL-тестирование включает в себя проверку процесса извлечения, трансформации и загрузки данных, убеждаясь в том, что данные успешно переносятся и сохраняют целостность.
	Тестирование перед миграцией (Pre-Migration testing):
	Тестирование, которое осуществляется перед тем, как данные или система будут перенесены на новую платформу или в новую среду. Цель - удостовериться, что данные и системы готовы к миграции, и что процесс миграции не приведет к потере данных или нарушению функциональности.
	Миграционное тестирование (Migration testing):
	Это проверка процесса переноса данных, приложений и других элементов системы из одного места в другое. Включает в себя тестирование целостности данных, проверку правильности переноса, а также проверку всех связанных процессов и функциональности после миграции.
	Тестирование после миграции (Post-Migration testing):
	Тестирование, которое выполняется после завершения процесса миграции, чтобы гарантировать, что данные были успешно перенесены, функциональность поддерживается, и система работает корректно в новой среде.
	Эти виды тестирования часто используются в контексте изменения инфраструктуры, обновления систем или переноса данных, чтобы обеспечить плавный и безопасный переход на новую платформу без потери данных или нарушения работы системы.
